#!/usr/bin/perl
#########################################################################
# sslmount 1.8
# Last Change: 2005-10-17  
# 2003-2005 by Martin Walter <mawa@uni-freiburg.de>
# http://omnibus.uni-freiburg.de/~mawa/sslmount/
# called by pam_sslmount.so
#########################################################################
    use strict;
    use English;
    use IO::Socket::SSL;
    use POSIX 'setsid';

    my $buf;
    my $comment;
    my $debug = 0;
    my $dir;
    my $fileserver;
    my $first = 1;
    my $gcos;
    my $gid;
    my $i;
    my $lastSignal;
    my $local_dir;
    my $name;
    my $nopw = 0;
    my $ntry = 0;
    my $p;
    my $password;
    my $quota;
    my $remote_dir;
    my $shell;
    my $sock;
    my $uid;
    my $user;
    my @x;

#   $IO::Socket::SSL::DEBUG = $debug;
#########################################################################
    sub Usage {
        print "@_";
        print "Usage: $0 [--debug] [--nopw] user[\@fileserver] [local_mountpoint]\npassword via stdin\n";
        exit;
    }
#########################################################################
    sub Tprint {    # print with timestamp
        my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time); 
        my $x=sprintf "%4d-%02d-%02d--%02d:%02d:%02d ($$)",1900+$year,$mon+1,$mday,$hour,$min,$sec;
        print "$x @_";
    }
#########################################################################
    sub Tdebug {    # debug-print with timestamp
        Tprint "@_" if ($debug);
    }
#########################################################################
    sub Terror {    # error-print with timestamp and exit 1
        Tprint "ERROR: @_";
        exit 1;
    }
#########################################################################
    sub Tsystem {   # system with timestamps
        my $ret;
        Tdebug ">>> @_ >>>\n";
        $ret = system @_;
        Tdebug "<<< @_ <<<\n";
        return $ret;
    }
#########################################################################
    sub FileServer {
        my $x=`ldapsearch -x -LLL uid=$user rufFileserver`;
        $x =~/rufFileserver: (.+)\n/;
#       return "$user.files.uni-freiburg.de" if ($1 =~ /\.uni-freiburg\.de$/);
        return $1;
    }
#########################################################################
    sub Mounted {
        open(F,"/proc/mounts");
        my $x=join "",<F>;
        close F; 
        if ($x =~ " $local_dir ") {
            Tdebug "mounted: $x";
            return 1;
        }
        Tdebug "not mounted: $local_dir\n";
        return 0;
    }
#########################################################################
    sub SameProcessActive {
        open(F,"/proc/$$/cmdline");
        my $x=join "",<F>;
        close F;
        my $n = 0;
        while (</proc/[1-9]*/cmdline>) {
            open(F,$_);
            $n++ if ($x eq join "",<F>);
            close F;
        }
        return $n > 2;
    }
#########################################################################
    sub Signal {
        ($lastSignal) = @_;
        Tdebug "Signal $lastSignal received\n";
    }
#########################################################################
    sub UserActive {
        my $n = 0;
        while (</proc/[1-9]*>) {
            my ($dev,$ino,$mode,$nlink,$u,$gid,$rdev,$size, $atime,$mtime,$ctime,$blksize,$blocks) = stat($_);
            $n++ if ($u == $uid);
        }
        return $n;
    }
#########################################################################
#########################################################################
#########################################################################
# main:
#########################################################################
    $| = 1;

    $ENV{"IFS"} = " \t\n";
    $ENV{"PATH"} = "/sbin:/bin:/usr/sbin:/usr/bin";

    Usage if ($#ARGV < 0);

    while ($ARGV[0] =~ /^(-.*)$/) {
        if ($1 eq "--debug") {
            $debug=1;
            Tprint "--debug\n";
        } elsif ($1 eq "--nopw") {
            $nopw = 1;
            Tprint "--nopw\n";
        } elsif ($1 eq "--help") {
            Usage;
        } else {
            Terror "invalid option: $1\n";
        } 
        shift;
    }
    Usage if ($#ARGV < 0);

    ($user,$fileserver) = split /\@/,$ARGV[0];
    Terror "invalid userid\n" if ((length($user) > 8) || ($user !~ /^[a-z][a-z_0-9-]+$/));

    $fileserver = FileServer if (!$fileserver);
    Terror "no fileserver\n" if (!$fileserver);

    ($name,$p,$uid,$gid, $quota,$comment,$gcos,$dir,$shell) = getpwnam $user;

    # signal another sslmount that this user is active, to prevent an umount
    $i = $$;
    if (!fork()) {
        $> = $uid;
        while (kill 0,$i) {
            sleep 1;
        }
        sleep 10;
        exit 0;
    }

    if ($#ARGV > 0) {
        $local_dir = $ARGV[1];
    } else {
        mkdir "/u/$1",0755 if ( ($dir =~ m|^/u/([a-z0-9]+)/(.*)$|) && ($2 eq $user) );
        $local_dir = $dir;
    }
    mkdir $local_dir,0755;
    Terror "$local_dir is not a directory\n" if (! -d $local_dir);

    if ($nopw) {
        $password = "";
    } else {
        $password = <STDIN>;
        $password =~ s/\n$//;
        Terror "invalid passwd\n" if (length($password) < 3);
    }

    if (SameProcessActive) {
        Tdebug "same process active\n";
        exit 0;
    }


#########################################################################
# connect to server

connect_to_server:
    $ntry = 0;

    Tdebug "connecting to fileserver: $fileserver ...\n";

    $sock = IO::Socket::SSL->new(
        PeerAddr => $fileserver,
        PeerPort => '2',
        Proto    => 'tcp',
        SSL_use_cert => 0,
        SSL_verify_mode => 0,
    );
    if (!$sock) {
        if (($ntry++ < 20) || !$first) {
            sleep 3;
            goto connect_to_server;
        }
        Terror "unable to connect to $fileserver\n";
    }

#########################################################################
#########################################################################
# sent data

    Tdebug "sent: $user\\nPASSWORD\n";
    $buf = "$user\n$password\n";
    $sock->write($buf, length($buf));
    $buf = "";
    $buf = $sock->readline;
    Tdebug "got: $buf";

    ($name,$p,$uid,$gid, $quota,$comment,$gcos,$remote_dir,$shell,@x) = split /[:\n]/,$buf;

    Terror "FAILED\n" if ($name eq "FAILED");
#   Terror "invalid remote_dir got from fileserver $fileserver: $remote_dir\n" if ($remote_dir !~ m|/u/[a-z0-9]+/$name|);

    if ($first) {
        my $mount_opts = "rw,nosuid,nodev,nolock,intr,hard";
        goto retry if (!Mounted && Tsystem("/bin/mount -t nfs -o $mount_opts $fileserver:$remote_dir $local_dir") );

        if (!$debug && fork()) {
            $sock->close(SSL_no_shutdown => 1);
            exit 0;
        }
        $first = 0;
    }

    open STDIN,  '/dev/null';
    open STDOUT, '/dev/null'  if (!-t STDOUT);
    open STDERR, '/dev/null'  if (!-t STDERR);
    setsid || die "Can't start a new session: $!";

    $SIG{'HUP'}  = 'IGNORE';
    $SIG{'INT' } = 'Signal';
    $SIG{'PIPE'} = 'Signal';
    $SIG{'ALRM'} = 'Signal';

    alarm 30;
    while ($buf = $sock->readline) {
        Tdebug "got: $buf";
        sleep 15;
        Tsystem("/bin/umount $local_dir") if (!UserActive);
        exit 0 if (!Mounted);
        $sock->write($buf, length($buf));
        Tdebug "sent: $buf";
        alarm 30;
    }        

retry:
    shutdown($sock,2);
    sleep 1;
    goto connect_to_server;

#########################################################################

