#! /bin/sh
#
# Description:  Adaptation of SuSE runlevel script file for use with 
#               Diskless X Stations (v3.3) - many configuration files
#		generated within here
#
# Author(s):    Dirk von Suchodoletz <dirk@goe.net>, 13-11-2005
#		Michael Janczyk, 26-08-2005
# Copyright:    (c) 2003, 2005 - RZ Universitaet Freiburg
# 
# Version:      0.3.5k
#
date="`date` - (c)dirk@goe.net"
#
# /etc/init.d/boot.servconf
#
### BEGIN INIT INFO
# Provides:          boot.servconf boot.localfs boot.rootfsck
# Required-Stop:
# Default-Start:     B
# Default-Stop:
# Description:       defines runlevel configuration 
### END INIT INFO

touch /etc/sysconfig/logfile
. /etc/rc.status
. /etc/sysconfig/logfile
[ $DEBUGLEVEL ] || DEBUGLEVEL=0
rc_reset

# read configuration information. machine-setup.default defines default
# values which might be overwritten by machine-setup. changes for default 
# behaviour best done in /etc/sysconfig/machine-setup.default
# most services expect setting of "yes" at least in defaults file!!

. /etc/sysconfig/machine-setup.default
. /etc/sysconfig/machine-setup

# simple helper functions
logwrite () {
  # self explanatory
  echo -e "bootserv.conf: $1" >> $LOGFILE
}
rllinker () {
  # script for generation of runlevel links
  local script="$1"
  local start="$2"
  local stop="$3"
  # empty runlevel links - decision on running certain services is
  # passed via configuration
  rm /etc/init.d/rc{3,5}.d/{K,S}*$script &>/dev/null
  for i in rc{3,5}.d/K$stop$script rc{3,5}.d/S$start$script ; do
    ln -sf ../$script /etc/init.d/$i
  done
}
testmkd () {
  # script for creating directories after testing of their existance
  test -d $1 || mkdir -p $1 &>/dev/null
}
runtime () {
  # script runtime computing
  case "$1" in
    start)
      cat /proc/uptime >/tmp/servconf.runtime
      logwrite "\n--> Starting runlevel service configuration\n"
    ;;
    stop)
      echo -n "runtime of $0 script (seconds): " >>$LOGFILE
      expr `cat /proc/uptime|sed -e "s,\..*,,"` - \
	`cat /tmp/servconf.runtime|sed -e "s,\..*,,"` >>$LOGFILE
      rm /tmp/servconf.runtime &>/dev/null;
    ;;
  esac
}

# basic settings mostly of configurations files
basics () {
  # set greeting
  echo "
            WELCOME TO                       \n (\l)
                  __      __  ___  __  __   __  __   __     __
                 |  |    |  ||    |  ||  | |  ||  |_|  |   |  |
                 |  |    |  ||       ||  | |  |       /    |__|
                 |  |___ |  ||  |    ||  |_|  | /  _        __
                 |______||__||__| |__|  _____/ |__| |__|   |__|

            Diskless Workstation (v3.4)      (c) <dirk@goe.net>
  ">/etc/issue
  # add a line to the SuSE version file
  echo "FLAVOUR = LD-v3.4-beta" >> /etc/SuSE-release
  # try to gather language variable for keyboard and system 
  # environment

  # setup local profile
  echo -e "test \"\$UID\" -ge 100 && PATH=\"\$PATH:.\"\n\
QTDIR=/usr/lib/qt3\nexport QTDIR\nno_proxy='localhost'\n\
export no_proxy" > /etc/SuSEconfig/profile

  # setup keytable
  # $language contains console language first then keytable
  KEYTABLE=`echo $language|sed -e 's,.* ,,'`
  if [ -z "$KEYTABLE" ] ; then KEYTABLE="de"; fi
  if [ -f /etc/init.d/kbd ] && [ -f /etc/sysconfig/keyboard ] ; then
     sed -e "s,KEYTABLE=.*,KEYTABLE=\"$KEYTABLE\","          \
	/etc/sysconfig/keyboard > /etc/sysconfig/keyboard.new
     mv /etc/sysconfig/keyboard.new /etc/sysconfig/keyboard
     rm /etc/init.d/rc{3,5}.d/*kbd &>/dev/null
     rllinker "kbd" "02" "10"
  else
     logwrite "The keytables for localization seem not to be \
\ninstalled, so setup is of no much sense."
  fi
    
  # set language variable
  lang=`echo $language|sed -e 's, .*,,'`
  sed -e "s,RC_LANG=.*,RC_LANG=\"$lang\"," \
    /etc/sysconfig/language > /etc/sysconfig/language.new
  mv /etc/sysconfig/language.new /etc/sysconfig/language

  # get some standard variables (from other variables or 
  # system settings)
  ipaddr="`ip route show|grep src|sed -e "s,.*src ,,"`"
  domain=`echo $domain_name|sed -e "s, .*,,"`
    
  # hostname of the machine
  echo $host_name >/etc/HOSTNAME
  echo -e "# /etc/hosts - file generated by\n#\t$0:\n#\t$date\
\n#\n# IP-Address  Full-Qualified-Hostname  Short-Hostname\n#\n\
127.0.0.1\tlocalhost\n::1\t\tlocalhost ipv6-localhost ipv6-loopback\n\
fe00::0\t\tipv6-localnet\nff00::0\t\tipv6-mcastprefix\nff02::1\
\t\tipv6-allnodes\nff02::2\t\tipv6-allrouters\nff02::3\t\t\
ipv6-allhosts\n" >/etc/hosts
  echo -e "$ipaddr\t$host_name.$domain $host_name\n" >>/etc/hosts

  # set up domainname and resolving
  test -n "$domain_name" && \
    echo -e "# /etc/resolv.conf - file generated by\n#\t$0:\n\
#\t$date\n#options timeout:1 attempts:1 rotate\n\
search "$domain_name >/etc/resolv.conf
  test -n "$domain_name_servers" && {
    for nameserver in $domain_name_servers; do
	echo nameserver $nameserver >>/etc/resolv.conf;
    done; }

  # write font server ip to file
  if [ -n "$font_servers" ] ; then
    logwrite "\n--> Writing font server configuration\n"
    echo > /etc/FONTSERVER;
    for fontserver in $font_servers; do
	echo $font_servers >>/etc/FONTSERVER;
    done;
  fi

  # boot.local
  if [ -n "$bootlocal_script" ]; then
    echo -e "# entries added by $0:\n#\t$date\n\n\
$bootlocal_script" >> /etc/init.d/boot.local
  fi

  # tex configuration
  if [ "x$tex_enable" = "xyes" ]; then
    testmkd /var/cache
    testmkd /tmp/scratch/texmf
    ln -sf /tmp/scratch/texmf /var/cache/fonts
    mkdir -p /var/cache/fonts/{pk,source,tfm}
    chmod -R 1777 /var/cache/fonts
    echo -e "% ls-R -- filename database for kpathsea; do not change this \
line\n% written by $0:\n% $date\n\
./:\nls-R\npk\nsource\ntfm\n\n\n./pk:\n\n./source:\n\n./tfm:"\
	> /var/cache/fonts/ls-R
  fi

  # set up nis if defined and add nis '+' to the passwd file. If you like to
  # use nis for other configuration files too, add them to the ramdisk. Add
  # the appropriate lines if needed.
  start_nis=no;
  if [ "x$nis_domain" != "x" ] && [ "x$nis_servers" != "x" ] ; then
	logwrite "\n--> Starting configuration of nis/yp service\n"
	echo $nis_domain >/etc/defaultdomain
	echo -e "# /etc/yp.conf - file generated by $0:\n\
#\t$date\n\nypserver "$nis_servers >/etc/yp.conf
	grep "+::::::" /etc/passwd &>/dev/null || echo "+::::::" >>/etc/passwd
	if [ -f /etc/init.d/ypbind ] ; then
	  # portmapper is needed for nis (and nfs)
	  portmap="yes"
	  rllinker "ypbind" "12" "06"
	  auth="nis"
	else
	  logwrite "$0: The ypbind (yp/nis client package) seems not \
to be installed,\nso starting service is of no sense."
	fi
  else
     logwrite "NIS disabled, because nis-domain and nis-servers variables \
are empty or\nnot defined"
  fi

  # configure name service caching daemon
  # name sevices switch for LDAP (no other at the moment)
  [ x"$auth" = "x" ] && auth="ldap"
  logwrite "\n--> Configuring system for use/auth with ldap\n"
  echo -e "# /etc/nsswitch.conf - file generated by $0:\n\
#\t$date\n\n" >/etc/nsswitch.conf.new
  grep -v -e "#" -e "shadow" -e "group" -e "^$" -e "passwd" \
	/etc/nsswitch.conf >> /etc/nsswitch.conf.new
  case "$auth" in
	ldap)
	  ls /lib/libnss_ldap.so.2 &>/dev/null || logwrite "nss_ldap library not \
found in /lib! Needed for ldap user administration"
	  ls /lib/security/pam_ldap.so &>/dev/null || logwrite "pam_ldap library not \
found in /lib/security! Needed for ldap user authentication"
	  echo -e "passwd: files ldap\ngroup: files ldap\n" \
	    >>/etc/nsswitch.conf.new
	  # configure pam for use with ldap if not done already
	  #grep ldap /etc/pam.d/* &>/dev/null || {
	  #  pushd /etc/pam.d &>/dev/null
	  #  for i in login sshd gdm xdm xscreensaver xlock; do
	  #    [ -f "$i" ] && {
	  #	echo -e "# /etc/pam.d/$i - file generated by $0:\n\
#\t$date\n#%PAM-1.0" > $i.new
	  #  	echo -e "auth\trequired\tpam_nologin.so\n\
#auth\tsufficient\tpam_unix2.so\n\
#auth\trequired\tpam_ldap.so\tuse_first_pass\n\
#auth\trequired\tpam_sslmount.so\t/usr/local/bin/sslmount use_first_pass" \
	  #	>> $i.new
	  #	grep -v -e "auth" -e "^$" -e "#" $i >> $i.new
	  #	mv $i.new $i
	  #    }
	  #  done
	  #  pushd &>/dev/null; 
	  #  echo -e "# /etc/security/pam_unix2.conf - file generated by $0:\n\
#\t$date\n#\n" >/etc/security/pam_unix2.conf.new
	  #  sed -e "s,use_ldap,," /etc/security/pam_unix2.conf \
	  #    >>/etc/security/pam_unix2.conf.new
	  #  mv /etc/security/pam_unix2.conf.new /etc/security/pam_unix2.conf
	  #} # end of pam ldap config
	;;
	nis)
	  echo -e "passwd: files nis\nshadow: files nis\ngroup: files nis\n" \
	  >>/etc/nsswitch.conf.new
	;;
	*)
	  echo -e "passwd: files\nshadow: files\ngroup: files\n" \
	  >>/etc/nsswitch.conf.new
	;;
  esac
  mv /etc/nsswitch.conf.new /etc/nsswitch.conf
}

# basic runlevel services
local_services () {
  # configure name service caching daemon
  if [ "x$start_nscd" != "xno" ] && [ -f /etc/init.d/nscd ]; then
    testmkd /var/run/nscd &>/dev/null
    logwrite "\n--> Configuring name service caching daemon (nscd)\n"
    rllinker "nscd" "12" "06"
  fi

  # at daemon
  if [ "x$start_atd" = "xyes" ]; then
    rllinker "atd" "14" "04"
  fi

  # configuration of cron services
  if [ "x$start_cron" = "xyes" ] ; then
	logwrite "\n--> Starting configuration of cron services\n"
	if [ -f /etc/init.d/cron ] ; then
	  mkdir -p /var/spool/cron/{lastrun,tabs}
	  echo -e "# /etc/crontab - file generated by $0:\n\
#\t$date\nSHELL=/bin/sh\nPATH=/usr/bin:/usr/sbin:/sbin:/bin:/usr/lib/news/bin\
\nMAILTO=\n-*/15 * * * *\troot\ttest -x /usr/lib/cron/run-crons && \
/usr/lib/cron/run-crons >/dev/null 2>&1\n" >/etc/crontab
	  [ "x$crontab_entries" != "x" ] && {
	    logwrite "Added the following line to /etc/crontab: \
$crontab_entries"
	    echo -e "$crontab_entries" >> /etc/crontab; }
	  rllinker "cron" "16" "04"
        else
	  logwrite "The cron start script seems not to be installed, \
\nso starting cron services make no sense."
	fi
  else
    logwrite "CRON service was disabled via machine-setup.default."
  fi

  # hardware abstraction layer (hal) daemon
  if [ "x$start_hal" = "xyes" ]; then
    rllinker "haldaemon" "15" "05"
  fi

  # dbus daemon (inter application communication for kde and gnome)
  if [ "x$start_dbus" = "xyes" ]; then
    rllinker "dbus" "03" "18"
  fi

  # configure resource manager
  if [ "x$start_resmgr" = "xyes" ]; then
    logwrite "\n--> Configuration of resource manager\n"
    if [ -f /etc/init.d/resmgr ] ; then
    	testmkd /var/run/resmgr/classes
	rllinker "resmgr" "04" "18"
    else
	logwrite "The resource manager seems not to be installed, \
\nso starting service is of no sense."
    fi
  fi

  # alsa sound subsystem
  if [ "x$start_alsasound" = "xyes" ]; then
    logwrite "\n--> Configuration of alsa sound system\nif system is \
not configured correctly, please check hardware setup."
    rllinker "alsasound" "15" "05"
  fi

  # micro dnsd
  # fixme!! start if no real dns present!?
  if [ "x$start_mdnsd" = "xyes" ]; then
    rllinker "mdnsd" "18" "06"
  fi

  # configure syslog daemon
  # fixme!! configure syslog-ng ...
  logwrite "\n--> Starting configuration of syslog server\n"
#  echo -e "# /etc/syslog.conf - file generated by\n#\t$0:\n\
#\t$date\n#\nkern.warn;*.err;authpriv.none\t/dev/tty10\n\
#kern.warn;*.err;authpriv.none\t|/dev/xconsole\n\
#*.emerg\n\n*.=warn;*.=err\t\t\t-/var/log/warn\n\
#*.crit\t\t\t\t/var/log/warn\n*.*;mail.none;news.none\t\t\
#-/var/log/messages" >/etc/syslog.conf
#  test -n "$log_servers" && \
#  for logserver in $log_servers; do
#	echo -e "*.*;*.*;*.*;*kern.!*\t@$logserver" >>/etc/syslog.conf
#  done

  # configure automount
  logwrite "\n--> Starting configuration of automounter\n"
  if [ -f /etc/init.d/autofs ] ; then
	testmkd /var/lock/subsys &>/dev/null
	echo -e "# /etc/auto.master - file generated by\n#\t$0:\n\
#\t$date\n/home\t/etc/auto.home\n/misc\t/etc/auto.misc" >/etc/auto.master
	echo -e "# /etc/auto.misc - file generated by\n#\t$0:\n\
#\t$date\n" >/etc/auto.misc
	echo -e "# /etc/sysconfig/autofs - file modified by\n#\t$0:\n\
#\t$date\n#" > /etc/sysconfig/autofs.new
	sed -e "s,AUTOFS_OPTIONS.*,AUTOFS_OPTIONS=\"--timeout 3\"," \
	  /etc/sysconfig/autofs >> /etc/sysconfig/autofs.new
	mv /etc/sysconfig/autofs.new /etc/sysconfig/autofs
	portmap="yes"
	rllinker "autofs" "18" "04"
  else
	logwrite "The automounter seems not to be installed, \
\nso starting service is of no sense."
  fi

  # configuration of acpi (power button for shutting down the machine)
  if [ "x$start_acpid" != "xno" ] ; then
    if [ -f /etc/init.d/acpid -a /proc/acpi/info ] ; then
	rllinker "acpid" "08" "06"
	rllinker "powersaved" "20" "04"
    else
	logwrite "ACPI and/or the acpi start script seem not to be availabe\
installed,\nso starting it makes no sense."
    fi
  else
    logwrite "ACPI service disabled via variable start-acpid=\"no\""
  fi

  # configuration for splash ...
  if `cat /proc/splash 2>/dev/null|grep -i " on"&>/dev/null` ; then
    if [ -x /sbin/splash.bin ] ; then
	  logwrite "\n--> Enabling splash animation\n"	 
	  rllinker "splash_early" "08" "14"
	  rllinker "splash" "13" "09"
    else
	  logwrite "\n--> Problems enabling splash animation, service \
not installed?"
    fi
  fi

  # prepare and start vmware services
  if [ -f /etc/init.d/vmware -a "x$vmware" = "xyes" ] ; then
  	portmap="yes"
	rllinker "vmware-prep" "11" "08"
	rllinker "vmware" "14" "10"
  else
	logwrite "The vmware configuration and start script seems not, \
\nto be installed, so starting it makes no sense."
  fi
  
  # start portmapper
  if [ "x$portmap" = "xyes" ]; then
  	rllinker "portmap" "08" "14"
  fi

}

# client services (depending on servers running somewhere or services for
# other clients
nw_services () {
  # configure print server (lpd or cups)
  if [ "x$start_printdaemon" != "x" ] && \
	[ "x$start_printdaemon" != "xno" ]; then
	logwrite "\n--> Starting configuration of print service\n"
	case $new_start_printdaemon in
	    yes|cups*|CUPS*)
		start_lpd="no"
		start_cups="yes"
		rllinker "cups" "14" "10"
		testmkd /var/spool/cups/tmp
		chown -R lp:lp /var/spool/cups
	    ;;
            lp*|LP*|PLP*)
                start_lpd="no"
                start_cups="yes"
		rllinker "lpd" "14" "10"
		testmkd /var/spool/lpd
		chown -R lp:lp /var/spool/lpd
            ;;
            *)
                logwrite "Do not know print-server $start_printdaemon; \
specify 'cups' or 'lpd'."
            ;;
        esac
  else
	# remove unused configuration files
	logwrite "Removing unneeded configuration info for cups"
	rm -rf /etc/cups/{ppds.dat,ppd}
  fi   
  # configure cups printer client
  if [ "x$lpr_servers" != "x" ] ; then
	echo -e "# /etc/cups/client.conf - file generated by\n#\t$0:\n\
#\t$date\n#\nServerName\t$lpr_servers" > /etc/cups/client.conf
  fi

  # configuration of xntp (extended network time protocol)
  if [ -n "$ntp_servers" -a "x$start_ntp" != "xno" ] ; then
      echo -e "# /etc/ntp.conf - file generated by $0:\n\
#\t $date\n" >/etc/ntp.conf;
      for ntpserver in $ntp_servers; do
        echo server $ntpserver >>/etc/ntp.conf;
      done
      if [ -f /etc/init.d/ntp ] ; then
	echo -e "ntp:x:74:65534:NTP daemon:/var/lib/ntp:/bin/false" \
	    >>/etc/passwd
	testmkd /var/lib/ntp/var/run/ntp &>/dev/null
	cp /usr/share/zoneinfo/Europe/Berlin /etc/localtime || \
	    logwrite "No such timezone data file"
	if [ "x$start_ntp" = "xinitial" ] ; then
	    ntpdate -s -b $ntp_servers &
	else
	    rllinker "ntp" "14" "07"
	fi
      else
        logwrite "The xntpd start script seems not to be installed, \
\nso starting it makes no sense."
      fi
  else
	logwrite "XNTPD disabled via variable start-xntpd=\"no\" or no \
ntp-servers where\ndefined via ntp-servers variable."
  fi

  # configuring samba service 
  if [ "$start_samba" = "yes" ] || [ "$start_samba" = "may" ] ; then
	logwrite "\n--> Starting configuration of samba service\n"

	if [ "$start_samba" = "yes" ] && [ -f /etc/init.d/smb ] ; then
	  rllinker "smb" "16" "08"
	  rllinker "nmb" "15" "09"
	else
	  logwrite "samba seems not to be installed, so starting service \
is of no much sense."
	fi
	    
	# set up samba configuration with NetBIOS name servers etc.
	if [ "x$netbios_name_servers" != "x" ]; then
	    wins_server="\\twins server = $netbios_name_servers"
	else
	    wins_server=";\\twins server = 127.0.0.1"
	fi
	if [ "x$netbios_workgroup" != "x" ]; then
	    workgroup="workgroup = $new_netbios_workgroup"
	else
	    workgroup="workgroup = dxs-network"
	fi

	test -f /etc/samba/smb.conf && {
	echo -e "# /etc/samba/smb.conf - file generated by $0:\n\
#\t$date\n#\n" >/etc/samba/smb.conf.new
	sed -e "s,\s*netbios name.*,netbios name = $host_name,g" \
          -e "s,\s*interfaces.*,interfaces = $ip_address/$broadcast_address,g" \
          -e "s,;.*wins server.*,$wins_server,g"   \
          -e "s,\s*workgroup =.*,$workgroup,g" \
	  /etc/samba/smb.conf | grep -v "#" >>/etc/samba/smb.conf.new;
	mv /etc/samba/smb.conf.new /etc/samba/smb.conf; }
	if [ -f /etc/lisarc ] ; then
	  echo -e "# /etc/lisarc - file generated by $0:\n\
#\t$date\n#\n" >/etc/lisarc.new
	  sed -e "s,AllowedA.*,AllowedAddresses=\
	    $ip_address/$subnet_mask;,g" \
	    -e "s,BroadcastN.*,BroadcastNetwork=\
	    $ip_address/$subnet_mask;,g" \
            -e "s,PingAdd.*,PingAddresses=\
	    $ip_address/$subnet_mask;,g" \
            /etc/lisarc >>/etc/lisarc.new;
	  mv /etc/lisarc.new /etc/lisarc;
	fi
  else
    logwrite "SMB disabled, because start-samba variable was not set to \
\"yes\" or \"may\"."
  fi

  # configuration of rwho service
  if [ "x$start_rwhod" = "xyes" ] ; then
	logwrite "\n--> Starting configuration of rwhod server\n"
	if [ -f /etc/init.d/rwhod ] ; then
	  testmkd /var/spool/rwho
	  rllinker "rwho" "13" "08"
	else
	  logwrite "The rwhod start script and the server seem not, \
\nto be installed, so starting it makes no sense."
	fi
  else
    logwrite "RWHO service was disabled via start-rwhod=\"no\"."
  fi

  # configuration of secure shell service
  if [ "x$start_sshd" = "xyes" ] ; then
	logwrite "\n--> Starting configuration of sshd server\n"
	if [ -f /etc/init.d/sshd ] ; then
	  mkdir -p /var/lib/{sshd,empty}
	  rllinker "sshd" "12" "10"
	  echo -e "# /etc/ssh/sshd_config - file generated by $0:\n\
#\t$date\n" >/etc/ssh/sshd_config.new;
	  sed -e "s,#UsePAM.*,UsePAM yes," /etc/ssh/sshd_config >> \
		/etc/ssh/sshd_config.new
	  mv /etc/ssh/sshd_config.new /etc/ssh/sshd_config
	else
	  logwrite "The sshd start script seems not to be installed, \
\nso starting it makes no sense. But you should install it for \
debugging purposes"
	fi
  else
    logwrite "SSHD service was disabled via start-rwhod=\"no\"."
  fi

  # configure afs client
  if [ "x$start_afs" = "xyes" ] ; then
	logwrite "\n--> Starting configuration of afs client\n"
	if [ -f /etc/init.d/afs-client ] ; then
	  test -d /afs || logwrite "no afs directory present!"
	  testmkd /var/cache/openafs
	  rllinker "afs-client" "15" "06"
	  echo -e "# /etc/sysconfig/afs-client - file generated by \
$0:\n#\t$date\n" >/etc/sysconfig/afs-client.new;
	  sed -e "s,THIS_CELL_SERVER.*,THIS_CELL_SERVER=\"$cell_serv\"," \
	    -e "s,PREFERREDSERVERS.*,PREFERREDSERVERS=\"$cell_serv\"," \
	    -e "s,THIS_CELL.*,THIS_CELL=\"$this_cell\"," \
	    -e "s,MEMCACHE.*,MEMCACHE=\"yes\"," \
	    /etc/sysconfig/afs-client >> \
		/etc/sysconfig/afs-client.new
	  mv /etc/sysconfig/afs-client.new /etc/sysconfig/afs-client
	else
	  logwrite "The afs-client start script seems not to be installed, \
\nso starting of afs services makes no sense."
	fi
  else	
    logwrite "AFS client service was disabled via start-afs=\"no\"."
  fi

  # snmp service for remote monitoring this machine
  if [ "x$start_snmp" = "xyes" ] ; then
	logwrite "\n--> Starting configuration of snmp services\n"
	if [ -f /etc/init.d/snmpd ] ; then
	  rllinker "snmpd" "24" "02"
	  testmkd /var/lib/net-snmp &>/dev/null
	else
	  logwrite "The snmp start script seems not to be installed, \
\nso starting cron services make no sense."
	fi
    # fixme!!
    # write service monitor depending on services started
  fi


}
     
# configuration of graphical user interface (not hardware setup) and
# display managers (or kiosk mode)
x11_stuff () {
  if [ "x$start_x" != "xno" ] ; then
	logwrite "\n--> Starting configuration of graphical console\n"
	# creating directories needed for X11
	for i in /var/X11R6/xkb/compiled \
		/var/tmp \
		/var/X11R6/bin \
		/var/lib/xkb \
		/etc/X11/xdm \
		/tmp/.ICE-unix \
		/tmp/.X11-unix; do testmkd $i; done
	chmod a+rwxt /tmp/.ICE-unix /tmp/.X11-unix /var/tmp &
	ln -fs /usr/X11R6/bin/Xorg /var/X11R6/bin/X
	rm -rf /etc/opt/kde3/share/config/kdm/Xservers /var/X11R6/lib \
		/etc/X11/xdm/Xservers || \
	logwrite "problem while removing files or directory"
	touch /etc/X11/xdm/Xservers
	ln -fs ../../usr/X11R6/lib/X11 /var/X11R6/lib
	# define windowmanagers/sessions available for choice
	if [ "x$desktop_session" != "x" ] ; then
	  windowmanagers="$desktop_session"
	  # write script for desktop-session chooser
	  if [ "x$vmware" != "xno" ] ; then
	    debug=""
	    [ $DEBUGLEVEL -gt 0 ] && debug="--debug 1"
	    echo -e "#!/bin/sh\n#\n# file generated by\n#\t$0:\n#\t$date\n
OSTYPE=\`echo \$0 | sed -e \"s,-, ,\" -e \"s,.*/,,\" | awk '{print \$1}'\`
SPECTYPE=\`echo \$0 | sed -e \"s,-, ,\" -e \"s,.*/,,\" | awk '{print \$2}'\`\n
OPTS=\"-o \$OSTYPE \${SPECTYPE:+\"-s \$SPECTYPE\"}\"\n
xterm -bg black -fg white -geometry 170x30+0-0 +sb \
-e \"runvmware \$OPTS $debug\"\n" > /var/X11R6/bin/desktop-session
	    chmod a+x /var/X11R6/bin/desktop-session
	    addpath="true";
	  fi
	else
	  windowmanagers="kde,gnome,icewm,failsafe"
	fi
	# create links to desktop-session chooser
	[ -f /usr/bin/X11/wmlist ] && wmlist=`cat /usr/bin/X11/wmlist`
	testmkd /etc/X11/sessions
	# check if /usr/X11R6/bin is writeable, else use /var/X11R6/bin
	if touch /usr/X11R6/bin/WM-Session &>/dev/null; then
	   sesspath="/usr/X11R6/bin"
	else 
	   sesspath="/var/X11R6/bin"
	   addpath="true"
	fi
	rm $sesspath/WM-Session &>/dev/null                                        
	for i in `echo $windowmanagers|sed -e "s/,/ /g"` ; do 
	  # beware!! quickhack for VMware sessions
	  echo $wmlist |grep "$i" &>/dev/null || \
	  test -x /usr/X11R6/bin/$i || \
	  echo -e "[Desktop Entry]\nX-SuSE-translate=true\nEncoding=UTF-8\n\
Type=XSession\nExec=$i\nTryExec=$sesspath/$i\n\
Name=$i\n" > /etc/X11/sessions/$i.desktop
	  # does not work correctly (add /var/X11R6/bin to path!!)
	  test -x /usr/X11R6/bin/$i || \
	    ln -fs /var/X11R6/bin/desktop-session $sesspath/$i
	done
	# add special path /var/X11R6/bin to the PATH variable
	[ "x$addpath" != "x" ] && \
	  echo -e "# added path component by $0:\n#\t$date\n\
PATH=\"\$PATH:/var/X11R6/bin\"" >>/etc/SuSEconfig/profile

	# write available X display manager to /etc/X11/xdm/Xaccess
	test -n "$x_display_manager" && \
	echo -e "# /etc/X11/xdm/Xaccess - file generated by $0:\n\
#\t$date\n*\n%hostlist\t$x_display_manager\n*\t\tCHOOSER %hostlist"\
	  >/etc/X11/xdm/Xaccess

	init="#7:5:respawn:/usr/X11R6/bin/X vt7 -quiet"
    	case "$start_x" in
	    yes|YES|direct|DIRECT|query|QUERY)
	      # direct connection onto the own displaymanager, which
	      # should be enabled then
	      [ "x$start_xdmcp" = "xno" ] && $start_xdmcp="yes"
	      init=""
	      dsx="yes"
	      xdmcp="false"
	      echo -e "# /etc/X11/Xservers - file generated by \
$0:\n#\t$date\n:0 local /usr/X11R6/bin/X :0 vt07\n">/etc/X11/xdm/Xservers
	      ;;
	    broadcast|BROADCAST)
	      # the client will XDMCP broadcast and choose first available
	      # X11 server
              [ $host_name ] || new_host_name="localhost"
	      [ "x$start_xdmcp" = "xgdm" ] || init="$init -broadcast"
	      ;;
	    indirect|INDIRECT)
	      # the client will try to XDMCP connect list of X11 servers
              [ $host_name ] || new_host_name="localhost"
	      if [ "x$start_xdmcp" = "xgdm" ] ; then
		init=""
	      else
		init="$init -indirect $host_name"
	      fi
	      [ "x$start_xdmcp" = "xno" ] && start_xdmcp="yes"
	      start_x="indirect"
	      xdmcp="true"
              ;;
	    *)
	      # no display manager needed in kiosk mode
	      # in this mode you have to provide the type of X session
	      # to start
              [ x$start_xdmcp != "x" ] || start_xdmcp="no";
	      init="#7:5:respawn:/var/X11R6/bin/kiosk /dev/tty7"
	      echo -e "#!/bin/sh\n# /var/X11R6/bin/kiosk - file generated by $0:\n\
#\t$date\nresmgr login nobody tty7\nresmgr grant nobody desktop\n\
chown nobody /dev/dsp*\n\
su -c 'xinit /etc/init.d/startgui $start_x -- vt7 -quiet' -l nobody &>/dev/null\n\
resmgr revoke nobody\nresmgr logout tty7\nkillall X\nsleep 2" >/var/X11R6/bin/kiosk
	      chmod a+x /var/X11R6/bin/kiosk &
              logwrite "If you dont like to have X without login \
started,\nset variable 'start-x' via dhcp to the appropriate \
value."
	      ;;
	esac
	# enable runlevel 5 (X11 gui under SuSE linux)
	grep -v -e "7:[35]" /etc/inittab > /etc/inittab.new
	[ -z "$init" ] || {
	  echo -e "# entry made by $0\n#\t$date\n" >> /etc/inittab.new
	  echo $init >>/etc/inittab.new; }
	mv /etc/inittab.new /etc/inittab
  fi
 
  # setup the display manager for graphical user interface
  if [ "x$start_xdmcp" != "xno" ] ; then
	logwrite "\n--> Starting configuration of display manager\n"
	testmkd /var/lib/xdm/authdir/authfiles
	testmkd /var/run/xdmctl
	if [ "$start_xdmcp" = "yes" ] ; then
	  logwrite "Setting X display manager to kde"
	  start_xdmcp=kdm
	fi
	case "$start_xdmcp" in
	  kdm|KDM)
	    PATH=$PATH:/opt/kde3/bin
	    if which kdm  >> $LOGFILE 2>&1 ; then
	      mkdir /var/lib/kdm &>/dev/null
	      echo -e "# /etc/opt/kde3/share/config/kdm/kdmrc - \
file generated by\n\
#\t$0: $date\n\
[General]\n\
ConfigVersion=2.3\nStaticServers=:0\nExportList=LANG\n\
PidFile=/var/run/kdm.pid\nAuthDir=/var/lib/xdm/authdir/authfiles/\n\
ServerVTs=-7\nConsoleTTYs=tty1,tty2,tty3,tty4,tty5,tty6\n\n\
[Xdmcp]\n\
Enable=$xdmcp\nXaccess=/etc/X11/xdm/Xaccess\n\
Willing=/etc/X11/xdm/Xwilling\n[Shutdown]\nHaltCmd=/sbin/halt\n\
RebootCmd=/sbin/reboot\n\n\
[X-*-Core]\n\
ServerCmd=/usr/X11R6/bin/X -br\n\
ServerArgsLocal=-nolisten tcp\n\
TerminateServer=true\n\
Resources=/etc/X11/xdm/Xresources\nSetup=/etc/X11/xdm/Xsetup\n\
Startup=/etc/X11/xdm/Xstartup\nReset=/etc/X11/xdm/Xreset\n\
Session=/etc/X11/xdm/Xsession\nClientLogFile=.xsession-errors-%s\n\
AutoReLogin=false\nAllowRootLogin=true\n\
AllowNullPasswd=true\nAllowShutdown=All\n\
SessionsDirs=/etc/X11/sessions,/usr/share/xsessions,\
/opt/kde3/share/apps/kdm/sessions\n\
AuthNames=XDM-AUTHORIZATION-1,MIT-MAGIC-COOKIE-1\n\n\
[X-*-Greeter]\n\
ShowUsers=Selected\nSelectedUsers=\nUserList=false\n\
GUIStyle=default\nLogoArea=Clock\nGreetString=Diskless Linux (%h)\n\
GreetFont=Nimbus Sans l,20,-1,5,48,0,0,0,0,0\n\
StdFont=Nimbus Sans l,14,-1,5,48,0,0,0,0,0\n\
FailFont=Nimbus Sans l,14,-1,5,74,0,0,0,0,0\n\
AntiAliasing=true\nLanguage=$lang\n\
EchoMode=OneStar\nShowLog=false\n\
UseTheme=true\nTheme=/opt/kde3/share/apps/kdm/themes/SUSE\n\
UseBackground=false\n\
BackgroundCfg=/etc/opt/kde3/share/config/kdm/backgroundrc\n\n\
[X-:*-Greeter]\n\
PreselectUser=None\n\
FocusPasswd=true\nLoginMode=DefaultLocal\n\
AllowClose=false\nUseAdminSession=true\n\n\
[X-:0-Core]\n\
AutoLoginEnable=false\n\
ClientLogFile=.xsession-errors\n\
NoPassEnable=false\n\n\
[X-:0-Greeter]\n\
LogSource=/dev/xconsole\n\
UseAdminSession=false" \
	      >/etc/opt/kde3/share/config/kdm/kdmrc 2>/dev/null
	    echo -e "" >/etc/opt/kde3/share/config/kdm/backgroundrc
	  else
	    logwrite "kdm seems not to be properly installed! Please check!"	     
	  fi
	  ;;
	  gdm|GDM)
	    PATH=$PATH:/opt/gnome/bin
            if which gdm >> $LOGFILE 2>&1; then
	      grep "gdm:x:" /etc/passwd &>/dev/null || \
	        echo "gdm:x:50:15:Gnome Display Manager \
#daemon:/var/lib/gdm:/bin/bash" >>/etc/passwd
	      mkdir -m 0750 -p /var/lib/gdm
	      chown gdm:shadow /var/lib/gdm &
	      xdmcp_hosts=`echo $x_display_manager|sed -e "s; ;,;"`
	      debug="false"
	      [ $DEBUGLEVEL -gt 0 ] && debug="true" 
	      echo -e "# /etc/opt/gnome/gdm/gdm.conf- file generated by
# $0: $date

[daemon]
AutomaticLoginEnable=false
TimedLoginEnable=false
#AlwaysRestartServer=false
Chooser=/opt/gnome/lib/gdm/gdmchooser
Greeter=/opt/gnome/lib/gdm/gdmgreeter
RemoteGreeter=/opt/gnome/lib/gdm/gdmgreeter
DefaultPath=/usr/local/bin:/usr/bin:/usr/X11R6/bin:/bin:/usr/games:/opt/bin:/opt/gnome/bin:/opt/kde3/bin:/opt/kde/bin:/usr/openwin/bin
RootPath=/usr/local/bin:/usr/bin:/usr/X11R6/bin:/bin:/usr/local/bin:/usr/bin:/usr/X11R6/bin:/bin:/usr/games:/opt/bin:/opt/gnome/bin:/opt/kde3/bin:/opt/kde/bin:/usr/openwin/bin:/opt/cross/bin
User=gdm
Group=shadow
#KillInitClients=true
LogDir=/var/lib/gdm
ServAuthDir=/var/lib/gdm
PostLoginScriptDir=/etc/opt/gnome/gdm/PostLogin/
PreSessionScriptDir=/etc/opt/gnome/gdm/PreSession/
PostSessionScriptDir=/etc/opt/gnome/gdm/PostSession/
DisplayInitDir=/etc/opt/gnome/gdm/Init
XKeepsCrashing=/etc/opt/gnome/gdm/XKeepsCrashing
RebootCommand=/sbin/shutdown -r now
HaltCommand=/sbin/shutdown -h now
SuspendCommand=/usr/bin/powersave --suspend-to-disk
BaseXsession=/etc/opt/gnome/gdm/Xsession
SessionDesktopDir=/usr/share/xsessions/:/etc/X11/sessions/:/etc/opt/gnome/dm/Sessions/:/opt/gnome/share/gdm/BuiltInSessions/
BaseXsession=/etc/opt/gnome/gdm/Xsession
SessionDesktopDir=/usr/share/xsessions/:/etc/opt/gnome/dm/Sessions/:/opt/gnome/share/gdm/BuiltInSessions/
UserAuthFBDir=/tmp
UserAuthFile=.Xauthority
StandardXServer=/usr/X11R6/bin/X
Xnest=/usr/X11R6/bin/Xnest -audit 0 -name Xnest

[security]
AllowRoot=true
AllowRemoteRoot=true
AllowRemoteAutoLogin=false
CheckDirOwner=true
#UserMaxFile=65536
RetryDelay=1
#SessionMaxFile=524388
NeverPlaceCookiesOnNFS=true

[xdmcp]
Enable=$xdmcp
HonorIndirect=true
MaxPending=4
MaxPendingIndirect=4
MaxSessions=10
MaxWait=15
MaxWaitIndirect=15
DisplaysPerHost=2
Willing=/etc/X11/xdm/Xwilling

[gui]
#MaxIconWidth=128
#MaxIconWidth=128

[greeter]
Browser=false
#TitleBar=true
MinimalUID=500
Quiver=true
Welcome=Welcome to %n
LockPosition=true
BackgroundImage=0
BackgroundColor=#000000
ShowGnomeFailsafeSession=false
ShowXtermFailsafeSession=false
ShowLastSession=false
Use24Clock=true
GraphicalTheme=GDM-SuSE
GraphicalTheme=circles
GraphicalThemeDir=/opt/gnome/share/gdm/themes/
GraphicalThemeRand=false
#SystemMenu=true
InfoMsgFile=/opt/gnome/share/gdm/UserInfo
InfoMsgFont=monospace 10 
SoundOnLogin=false

[chooser]
HostImageDir=/opt/gnome/share/hosts/
Broadcast=false
Multicast=false
Hosts=$xdmcp_hosts

[debug]
Enable=$debug" \
	      >/etc/opt/gnome/gdm/gdm.conf
	    if [ "x$start_x" = "xindirect" ] ; then
		# when X server consumes to much mem set X -terminate
		echo -e "\n[servers]\n0=Terminal -audit 0 -indirect \
$host_name\n\n\
[server-Terminal]\nname=Terminal server\ncommand=/usr/X11R6/bin/X \
-audit 0\n\
flexible=true\nhandled=true\nchooser=true" >>/etc/opt/gnome/gdm/gdm.conf
	    else
		echo -e "\n[servers]\n0=Standard\n\n\
[server-Standard]\nname=Standard server\ncommand=/usr/X11R6/bin/X\n\
flexible=true\nhandled=true" >>/etc/opt/gnome/gdm/gdm.conf
	    fi
          else
            logwrite "gdm seems not to be properly installed! Please check!"
          fi
	  ;;
	  wdm|WDM)
	    #empty	
	  ;;
	esac
	echo -e "# /etc/X11/xdm/xdm-config - file generated by\n\
#\t$0: $date\n\nDisplayManager.errorLogFile:\t/var/log/xdm.errors\n\
DisplayManager.pidFile:\t\t/var/run/xdm.pid\n\
DisplayManager.authDir:\t\t/var/lib/xdm\n\
DisplayManager.keyFile:\t\t/etc/X11/xdm/xdm-keys\n\
DisplayManager.servers:\t\t/etc/X11/xdm/Xservers\n\
DisplayManager.accessFile:\t/etc/X11/xdm/Xaccess\n\
DisplayManager.willing:\t\tsu nobody -c /etc/X11/xdm/Xwilling\n\
DisplayManager.*.authName:\tMIT-MAGIC-COOKIE-1\n\
DisplayManager.*.authComplain:\tfalse\n\
DisplayManager.*.setup:\t\t/etc/X11/xdm/Xsetup\n\
DisplayManager.*.chooser:\t/etc/X11/xdm/RunChooser\n\
DisplayManager.*.startup:\t/etc/X11/xdm/Xstartup\n\
DisplayManager.*.session:\t/etc/X11/xdm/Xsession\n\
DisplayManager.*.reset:\t\t/etc/X11/xdm/Xreset">/etc/X11/xdm/xdm-config
	[ "$xdmcp" = "false" ] && echo -e \
	  "DisplayManager.requestPort:\t0\n">>/etc/X11/xdm/xdm-config

	sed -e "s,DISPLAYMANAGER=.*,DISPLAYMANAGER=\"$start_xdmcp\"," \
	    -e "s,.*_XSERVER.*,DISPLAYMANAGER_STARTS_XSERVER=\"$dsx\"," \
	  /etc/sysconfig/displaymanager > /etc/sysconfig/displaymanager.new
	mv /etc/sysconfig/displaymanager.new /etc/sysconfig/displaymanager
	if [ -f /etc/init.d/xdm ] ; then
	  # ensure xdm is not linked twice AND started after kbd
	  rm /etc/init.d/rc5.d/*xdm &>/dev/null
	  ln -sf /etc/init.d/xdm /etc/init.d/rc5.d/K06xdm
	  ln -sf /etc/init.d/xdm /etc/init.d/rc5.d/S05xdm
	else
	  logwrite "The X display manager start script seems not to be, \
\ninstalled, so starting it makes no sense."
	fi
  fi

  # remove kde and gnome configuration directories if not needed
  # only useful if no union/mulafs are used
  if [ "x$start_x" = "xno" ] && [ "x$start_xdmcp" = "xno" ] ; then
	logwrite "\nRemoving kde and gnome configuration directories! \
If you\ndo not intend this enable XDMCP or start X server or change the \
\nconfiguration tool $0"
	rm -rf /etc/opt/* /etc/X11/* &>/dev/null
  fi
}

case "$1" in
  start)
   echo -n "Starting services setup and machine config "
   # shouldn't be a problem to run all service setup in background
   # plenty of time until udev, coldplug are finished
   basics &
   local_services &
   nw_services &
   x11_stuff & 
   rc_status -v
   ;;
  stop)
    rc_failed 3
    rc_status -v
    ;;
  status)
    rc_failed 4
    rc_status -v
    ;;
  *)
    echo "Usage: $0 {start|stop|status}"
    exit 1
    ;;
esac

rc_exit
