#!/bin/bash
#
# Description:  universal (distro independent) generator for initial
#		ramdisks for linux diskless clients 
#
# Author(s):    Dirk von Suchodoletz <dirk@goe.net>, 24-03-2006
#		Nico Dietrich
#
# Version:      0.3.1e
#
# Copyright:    (c) 2003 - 2006 - RZ Universitaet Freiburg

DEBUG=1
COMETCEXCL="XF86Config*\nissue*\nmtab*\nfstab*\n"
COMDIRINDXS="/tmp/scratch /var/lib/nobody"

# distro specific settings read from configuration file
# D_SYSCONFDIR - system wide configuration settings in /etc - sysconfig in  
# SuSE and RedHat, default in Debian and Ubuntu, conf.d in Gentoo
# D_ETCEXCL - list of files, wildcards to be excluded from /etc when using 
# bind mounts
# D_DIRINBINDMNT - lists of directories to be created in bind mounted rw
# part of the client filesystem
# D_RODIRSINRW - ReadOnly Directories in RW part of filesystem to save on 
# TempFS usage
# D_DIRINDXS - directories in client filesystem which should be present 
# anyhow
# D_BINDMNT - any code which is specific in bind mount environment
# D_RCDIRS - runlevel directories relative to /etc
# D_HWMODTOIGNORE - 

D_SYSCONFDIR="<set in ~/distro-config/distro file>"
D_ETCEXCL="<set in ~/distro-config/distro file>"
D_BINDMPTS="<set in ~/distro-config/distro file>"
D_DIRINBINDMNT="<set in ~/distro-config/distro file>"
D_RODIRSINRW="<set in ~/distro-config/distro file>"
D_DIRINDXS="<set in ~/distro-config/distro file>"
D_BINDMNT="<set in ~/distro-config/distro file>"
D_INITDIR="<set in ~/distro-config/distro file>"
D_INITBOOTD="<set in ~/distro-config/distro file>"
D_RCDIRS="<set in ~/distro-config/distro file>"
D_RCDIRSINRW="<set in ~/distro-config/distro file>"
D_INITSCRIPTS="<set in ~/distro-config/distro file>"
D_XF86CONFFILE="<set in ~/distro-config/distro file>"
D_XFONTPATH="<set in ~/distro-config/distro file>"
D_DEFAULTCOUNTRY="<set in ~/distro-config/distro file>"

#########################################################################
# End of global variable declaration, nothing needed to be changed at 
# default below that line

usage()
{
  echo Here is how to use mkdxsinitrd
  exit 0
}

# replaces which to find executables inside ROOTDIR
binfinder()
{
local PROGRAM="$1"
local RET=1
for ELEMENT in bin sbin usr/bin usr/sbin usr/local/bin usr/bin/X11; do
  if [ -f "${ROOTDIR}/$ELEMENT/$PROGRAM" ] && \
     [ -x "${ROOTDIR}/$ELEMENT/$PROGRAM" ]; then
    printf '%s\n' "${ROOTDIR}/$ELEMENT/$PROGRAM"
    RET=0
    break
  fi
done
return "$RET"  
}

# copy some binary to given destination. Takes binary in $1 and 
# destination in $2
cobi()
{
local DEST=$2
local FPTB=`binfinder $1`
if [ -z ${FPTB} ] ; then
  return 1;
elif [ -L ${FPTB} ] ; then
  # do not copy the link but the binary the link points to

  local LINKDEST=`ls -la ${FPTB} | sed -e "s,.* ,,"`
  case $LINKDEST in 
    /*) FPTB=${ROOTDIR}${LINKDEST}
	;;
    *) ;;
  esac
  cp ${FPTB} ${INSTDIR}/${DEST}
else
  cp ${FPTB} ${INSTDIR}/${DEST}
fi
# get an idea which libraries are needed
chroot ${ROOTDIR} ldd.server ${FPTB#${ROOTDIR}*} >> ${INSTDIR}/tmp/libraries
}

# replace copy
repco()
{
local FILENAME=$1
# do not forget to define all variables which should be replaced within
# the start and configuration scripts. All comment lines will be deleted.
if [ -d initrd-stuff/${FILENAME} ] ; then
  [ -d ${INSTDIR}/${FILENAME} ] || mkdir -p ${INSTDIR}/${FILENAME}
else
  if file initrd-stuff/${FILENAME}| grep "ELF" &>/dev/null ; then
    cp initrd-stuff/${FILENAME} ${INSTDIR}/${FILENAME}
  elif [ -L initrd-stuff/${FILENAME} ] ; then
    cp -a initrd-stuff/${FILENAME} ${INSTDIR}/${FILENAME%/*}
  else
    sed -e "s,@@@INSTDIR@@@,${INSTDIR},g;s,@@@KERNVER@@@,${KERNVER},g" \
        -e "s,@@@DISTRO@@@,${DISTRO},g;s,@@@NETIF@@@,${NET_IF},g" \
        -e "s,@@@NWMODULES@@@,${NWMODULES},g" \
        -e "s,@@@COMDIRINDXS@@@,${COMDIRINDXS},g" \
        -e "s,@@@COMETCEXCL@@@,${COMETCEXCL},g" \
	-e "/^#[^!].*/d" \
          initrd-stuff/${FILENAME} >> ${INSTDIR}/${FILENAME}
  fi
fi
}

# this function incrementally concats and copies distro-specific functions, 
# configuration variables and files
copy_distro_stuff() {
  # first insert dependencies
  case $1 in
    suse)
      case $2 in
        9.3)
        ;;
        10.0)
          copy_distro_stuff suse 9.3
        ;;
        10.1)
          copy_distro_stuff suse 10.0
        ;; 
      esac
    ;;
    debian)
    ;;
    ubuntu)
    ;;
    gentoo)
    ;;
  esac

  # now insert the current stuff
  cat distro-specs/$1/config-$2 >>${INSTDIR}/etc/sysconfig/config
  cat distro-specs/$1/functions-$2 >>${INSTDIR}/etc/distro-functions
  # would be cool not to copy .svn here ...
  cp -a distro-specs/$1/files-$2 ${INSTDIR}/etc/sysconfig/files 2>/dev/null
  # ... so remove them afterwards ...
  find ${INSTDIR}/etc/sysconfig/files \
    -regex ".*/\..*" -exec rm -rf {} 2>/dev/null \;
}

#########################################################################
# End of function declaration

while getopts :hgk:i:r:o:s:f:n:Sut:d:v:I:V:a: a ; do
  case $a in
    \:|\?) 
    case $OPTARG in
      k)  echo "-k requires kernel version parameter";;
      i)  echo "-i requires initrd path parameter";;
      f)  echo "-f requires file system module list parameter";;
      n)  echo "-n requires network module list parameter";;
      r)  echo "-r requires root dir parameter";;
      s)  echo "-s requires image size(s)";;
      t)  echo "-t requires tmp dir parameter";;
      d)  echo "-d requires linux distribution name";;
      v)  echo "-v requires linux distribution version";;
      I)  echo "-I requires network interface parameter";;
      V)  echo "-V requires an executable to run inside linuxrc";;
      *)  echo "Unknown option: -$OPTARG"
          echo "Try mkinitrd -h";;
    esac
    exit 1
    ;;
    g)  use_glibc=1;;
    k)  KERNVER=$OPTARG;;
    i)  INITRD_PATH=$OPTARG ;;
    f)  FSMODULES=$OPTARG;;
    n)  NWMODULES=$OPTARG ;;
    r)  ROOTDIR=$OPTARG;;
    s)  SPLASH=$OPTARG;;
    t)  INSTDIR=$OPTARG;;
    d)  DISTRO=$OPTARG;;
    v)  DISTRO_VER=$OPTARG;;
    I)  NET_IF=$OPTARG;;
    a)  acpi_dsdt="$OPTARG";;
    S)  use_selinux=1;;
    V)  vendor_init_script="$OPTARG";;
    u)  sysfs_root=1
	    use_udev=
	    ;;
    h)  usage;;
  esac
done
shift $(expr $OPTIND - 1)


#########################################################################
# End of parameter, argument interpretation

if [ -z "$INSTDIR" ] ; then
  INSTDIR=/tmp/dxs-instrd
fi

rm -rf ${INSTDIR}
mkdir -p ${INSTDIR}/{dev,proc,tmp,mnt,root,bin,sys,lib}
ln -s /bin ${INSTDIR}/sbin
mkdir -p ${INSTDIR}/usr/share
# needed for KNOPPIX hwsetup not to confuse with ${D_SYSCONFDIR}
mkdir -p ${INSTDIR}/etc/sysconfig

# temporary ldd for getting library information out of initrd binaries
cp `which ldd` ${ROOTDIR}/usr/bin/ldd.server

# if still no distro name set, try to find it using significant files
if [ -z "${DISTRO}" ] ; then
  if [ -e ${ROOTDIR}/etc/SuSE-release ] ; then
    DISTRO=suse
    DISTRO_VER=`grep "VERSION" ${ROOTDIR}/etc/SuSE-release | sed "s/.*= //"`
  elif [ -e ${ROOTDIR}/etc/lsb-release ] ; then
    . ${ROOTDIR}/etc/lsb-release 
    DISTRO=${DISTRIB_ID}
    DISTRO_VER=${DISTRIB_RELEASE}
  elif [ -e ${ROOTDIR}/etc/debian_version ] ; then
    DISTRO=debian
    DISTRO_VER=`cat ${ROOTDIR}/etc/debian_version`
  elif [ -e ${ROOTDIR}/etc/gentoo-release ] ; then
    DISTRO=gentoo
    # any idea on the versioning scheme??
    DISTRO_VER=""
  else
    echo -e "Could not detect client distribution type and version. Please \
specify\nas command line argument (-d <distro-name> -v <distro-version>)"
    exit 1;
  fi  
fi

case "${DISTRO}" in
  Debian*|debian*|Sarge*|sarge*)
    DISTRO=debian
    case "${DISTRO_VER}" in
      Sarge*|sarge*|3.1*|*)
        DISTRO_VER=3.1
      ;;
    esac
  ;;
  Ubuntu*|ubuntu*)
    DISTRO=ubuntu
    case "${DISTRO_VER}" in
      Breezy*|breezy*|*)
        DISTRO_VER=5.10
        cp ${ROOTDIR}/lib/libnss_compat.so.2 ${INSTDIR}/lib
      ;;
    esac
    ;;
  Gentoo*|gentoo*)
    DISTRO=gentoo
    case "${DISTRO_VER}" in
      2005*|*)
        DISTRO_VER=2005.1
      ;;
    esac  
  ;;
  SuSE*|suse*|Suse*|SuSe*|SUSE*|*)
    DISTRO=suse
    case "${DISTRO_VER}" in
      9*)
        DISTRO_VER=9.3
        # might be needed for older udev/hotplug
        # cp -a ${ROOTDIR}/etc/hotplug* ${INSTDIR}/etc
      ;;
      10.0)
        DISTRO_VER=10.0
      ;;
      10*)
        DISTRO_VER=10.1
      ;;
    esac
     
    #cp -a /etc/sysconfig/{hardware,network}  ${INSTDIR}/etc/sysconfig
  ;;
esac

# hotplug/udev style and stuff
cp -a ${ROOTDIR}/etc/udev ${INSTDIR}/etc

# an dieser stelle sollte jetzt sichergestellt sein, dass sowohl DISTRO als auch DISTRO_VER eindeutig gesetzt sind!

copy_distro_stuff ${DISTRO} ${DISTRO_VER}

# devices needed rather early (copied from /tmp to /dev in init)
mknod ${INSTDIR}/tmp/console c 5 1 &>/dev/null
mknod ${INSTDIR}/tmp/null c 1 3 &>/dev/null
mknod ${INSTDIR}/tmp/kmsg c 1 11 &>/dev/null

#if no klibc - klibc shell seems not to have enough functionality :-(
for bbins in bash ash sh; do
  if cobi ${bbins} bin ; then 
    ln -fs ${bbins} ${INSTDIR}/bin/sh
    [ "${bbins}" != "bash" ] && ln -fs ${bbins} ${INSTDIR}/bin/bash
    break
  else echo "Binary not found (${bbins})"; fi
done

# if no klibc
for bbins in ip ifconfig; do
  if cobi ${bbins} bin ; then 
    [ "${bbins}" = "ifconfig" ] && cobi route bin
    break
  else echo "Binary not found"; fi
done

# needed standard binaries
for bbins in \
    cat chmod chown chroot cp expr fdisk killall ln ls mkdir mkfs.ext2 \
    modprobe mount portmap rmmod sed sort rm tar umount
  do
  cobi ${bbins} bin || echo "Program ${bbins} not found"
done

# one of the dhcp clients
for dhcp in dhclient dhcpcd pump ipconfig ; do
  binfinder $dhcp && break;
done
cobi $dhcp bin
mkdir -p ${INSTDIR}/var/{lib,run}

# tftp client binary for configuration via file - get machine-setup per
# tftp from dhcp (or specified other) server
## irgendwann mal nur konditional ...
for tftp in atftp tftp ; do
  binfinder $tftp && break
done
cobi $tftp bin

# debug binaries
for bbins in \
    date lsmod lsof ps strace time
  do
  cobi ${bbins} bin || echo "Program ${bbins} not found"
done

# style of hotplug/udev/dev (for etc directories see above!!)
for bbins in udev udevd udevstart
  do
  cobi ${bbins} bin &>/dev/null || echo "Program ${bbins} not found"
done

# if nfs
mkdir -p ${INSTDIR}/var/lib/nfs/state

# if nbd or dnbd
if [ -n "${FSMODULES}" ] ; then
for i in ${FSMODULES}; do
  case "$i" in
    dnbd)
      cobi dnbd-client bin
    ;;
    nbd)  
      cobi nbd-client bin
    ;;
  esac
done
fi

# distro specific additional stuff
case "${DISTRO}" in 
  debian*)
    cp ${ROOTDIR}/lib/libnss_compat.so.2 ${INSTDIR}/lib;;
esac

# add needed libraries depending on choosen binaries. use chroot
# on ldd, otherwise the detection does not work properly. ldd has to be
# static linked binary
for lib in `cat ${INSTDIR}/tmp/libraries 2>/dev/null | \
  sed -e "s,tls,,;s,i686/cmov,," \
  -ne 's:\t\(.* => \)\?\(/.*\) (0x[0-9a-f]*):\2:p' | sort -u` ; do
  baselib=`basename ${lib}`
  test -e  ${INSTDIR}/lib/${baselib} || \
    cp /${ROOTDIR}/${lib} ${INSTDIR}/lib
done
rm ${ROOTDIR}/usr/bin/ldd.server ${INSTDIR}/tmp/libraries

# add kernel modules and dependency files
if [ -z "$KERNVER" ] ; then
  KERNVER=`ls -l ${ROOTDIR}/boot/vmlinuz | grep vmlinuz | sed "s/.*vmlinuz-//"`
fi
if [ -z "$KERNVER" ] ; then
  KERNVER=`ls -l ${ROOTDIR}/vmlinuz | grep vmlinuz | sed "s/.*vmlinuz-//"`
fi
# if no vmlinuz found, go for vmlinuz-x.yz.uv...
if [ -z "$KERNVER" ] ; then
  KERNVER=`ls -lt /nfsroot/boot/vmlinuz* | grep vmlinuz | sed -n "1,1s/.*vmlinuz-//p"`
  echo "No vmlinuz-link found. Using kernel version "$KERNVER
fi

if [ -z "$KERNVER" ] ; then
  echo "No kernel version set or detected - please use the -k flag! Exiting..."
  exit 1
fi

if [ -z "$NWMODULES" ] ; then
  NWMODULES="forcedeth e1000 e100 tg3 via-rhine r8169 pcnet32"
fi
if [ -z "$FSMODULES" ] ; then
  FSMODULES="nbd nfs"
fi
if [ -z "$INITRD_PATH" ] ; then
  INITRD_PATH="${ROOTDIR}/tmp/dxsinitrd.gz"
fi

# define modules to put into initial ramdisk for debugging
#DEBUGMODULES="uhci_hcd usbhid"
DEBUGMODULES=""

# put all needed modules into initial ramdisk
mkdir -p ${INSTDIR}/lib/modules/${KERNVER}
for module in af_packet unix ${NWMODULES} ${FSMODULES} ${DEBUGMODULES}; do
  mod=`cd /${ROOTDIR}; find "lib/modules/${KERNVER}" -name ${module}.ko \
2>/dev/null`
  if [ -n "$mod" ] ; then
    mpath=${INSTDIR}/${mod%/*}
    mkdir -p ${mpath}
    cp ${ROOTDIR}/$mod ${mpath}
    # fixmee!! selection of dependent modules could be handled a little bit
    # more clever
    rdirprefix="${ROOTDIR}/lib/modules/${KERNVER}/kernel"
    ddirprefix="${INSTDIR}/lib/modules/${KERNVER}/kernel"
    case "$module" in
      e100|8139too|via-rhine|sis900|epic100|sundance|8139cp|eepro100|pcnet32)
        cp ${rdirprefix}/drivers/net/mii.ko \
           ${ddirprefix}/drivers/net &>/dev/null
      ;;
      nfs)
        # create directory structure for modules needed and copy them
        # to the proper place (as expected by modprobe/modules.dep)
	mkdir -p ${ddirprefix}/net/sunrpc
	mkdir -p ${ddirprefix}/fs/lockd ${ddirprefix}/fs/nfs_common
        cp ${rdirprefix}/net/sunrpc/sunrpc.ko \
	  ${ddirprefix}/net/sunrpc &>/dev/null
	cp ${rdirprefix}/fs/lockd/lockd.ko \
          ${ddirprefix}/fs/lockd &>/dev/null
	cp ${rdirprefix}/fs/nfs_common/nfs_acl.ko \
	  ${ddirprefix}/fs/nfs_common &>/dev/null
      ;;
      ext3)
        mkdir -p ${ddirprefix}/fs/jbd
        cp ${rdirprefix}/fs/jbd/jbd.ko \
          ${ddirprefix}/fs/jbd
      ;;
    esac
  fi
done
cp ${ROOTDIR}/lib/modules/${KERNVER}/modules.* \
  ${INSTDIR}/lib/modules/${KERNVER}

# initial ramdisk scripts: init, functions, servconfig, hwautocfg, ...
# copy and replace variable names
for dirs in `find initrd-stuff/* ! -regex ".*/\..*"` ; do
  repco ${dirs##initrd-stuff/} 
done
chmod 755 ${INSTDIR}/init \
  ${INSTDIR}/bin/{servconfig,hwautocfg,screenres,dhcpmkconfig}

# finally add the common client configuration file
if [ -f /etc/dxs/client.cfg/machine-setup.default ] ; then
  cp /etc/dxs/client.cfg/machine-setup.default \
    ${INSTDIR}/etc/machine-setup
elif [ -f ../installer/default_files/machine-setup_default ] ; then
  cp ../installer/default_files/machine-setup_default \
    ${INSTDIR}/etc/machine-setup
else
  echo -e "# default for machine-setup does not exist\nroot logins are \
disabled\nroot_pw='!'" > ${INSTDIR}/etc/machine-setup
fi

#########################################################################
# End of file copy procedures


# finally create the compressed initial ramdisk cpio archive
pushd . > /dev/null 2>&1
  cd ${INSTDIR}
  find . ! -name "*~" | cpio -H newc --create | gzip -9 > $INITRD_PATH
popd > /dev/null 2>&1

