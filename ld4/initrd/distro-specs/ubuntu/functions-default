# Description:  configuration script for general Ubuntu to configure
#               linux diskless clients (executed within initial ramdisk
#               after genconfig) 
#
# Author(s):    Dirk von Suchodoletz <dirk@goe.net>, 23-06-2006
#               Nico Dietrich
#               Felix Endres
#
# Copyright:    (c) 2006 - RZ Universitaet Freiburg
# 
# Version:      0.3.0a

# empty functions are defined at the beginning of /etc/functions

# distro specific stuff to initialize
preinit () {
  echo "Creating dhcp user"
  echo "dhcp:x:101:">>/etc/group
  echo "dhcp:x:101:101::/nonexistent:/bin/false" >>/etc/passwd

  # load unix module to provide sockets (is compiled into kernel on
  # the live CDs!?)
  modprobe ${MODPRV} unix || error "$df_errumod" nonfatal
}


#overwrite settings set by hwautocfg
displayvars (){
Files=' \t 	  FontPath\t\t       "/usr/share/X11/fonts/misc"\n
\t        FontPath\t\t   "/usr/share/X11/fonts/100dpi/:unscaled"\n
\t        FontPath\t\t    "/usr/share/X11/fonts/75dpi/:unscaled"\n
\t        FontPath\t\t    "/usr/share/X11/fonts/Type1"\n
\t        FontPath\t\t    "/usr/share/X11/fonts/100dpi"\n
\t        FontPath\t\t    "/usr/share/X11/fonts/75dpi"\n
'
Module=' \t        Load\t	    "i2c"\n
\t        Load\t	    "bitmap"\n
\t        Load\t	    "ddc"\n
\t        Load\t	    "dri"\n
\t        Load\t	    "extmod"\n
\t        Load\t	    "freetype"\n
\t        Load\t	    "glx"\n
\t        Load\t	    "int10"\n
\t        Load\t	    "type1"\n
\t        Load\t	    "vbe"\n'

}
# distro specific function called from servconfig script
config_distro () {
# add the halt link to the 0 and 6 runlevel directories
  ln -sf ../init.d/halt /mnt/etc/rc0.d/S90halt
  ln -sf ../init.d/reboot /mnt/etc/rc6.d/S90reboot
  
  # set default runlevel
  sed -e "s/.*initdefault/id:${D_INITDEFAULT}:initdefault/" -i /mnt/etc/inittab
}

# AUS SuSE-9.3
# udev/hotplug - auto device discovery service
udev_hotplug () {
  local result=0
  [ -d /etc/hotplug -a -d /etc/hotplug.d ] || error "$df_errhotpl" nonfatal
  echo "Enabling hotplug/udev"
  udevstart || result=1
  udevd -d || result=1
  return $result
}

# linking runlevel scripts
rllinker () {
local script="$1"
local start="$2"
local stop="$3"
# empty runlevel links - decision on running certain services is
# passed via configuration
for i in rc2.d/K$stop$script rc3.d/K$stop$script \
         rc2.d/S$start$script rc3.d/S$start$script ; do
  if ! [ -f /mnt/etc/init.d/$script ]; then
    echo "Target `pwd`../$script does not exist. Skipping links"
    break
  else 
    ln -sf ../init.d/$script /mnt/etc/$i
  fi
done
}

# group of functions for the normal runlevels - first parameter is start
# second stop
# function for ntp configuration
config_ntp () {
local start=07
local stop=14
if [ -f /mnt/etc/init.d/ntp ] ; then
  echo -e "ntp:x:74:65534:NTP daemon:/var/lib/ntp:/bin/false" \
    >>/mnt/etc/passwd
  testmkd /mnt/var/lib/ntp/var/run/ntp &>/dev/null
  if [ "x$start_ntp" = "xinitial" ] ; then
    echo -e "# entry added by $0: $date" \
      >>/mnt/etc/${D_INITDIR}/boot.ld
    echo "ntpdate -s -b $ntp_servers >${LOGFILE} 2>&1 &" \
      >>/mnt/etc/${D_INITDIR}/boot.ld
  else
    rllinker "ntp" "$start" "$stop"
  fi
fi
}

# function for atd
config_atd () {
if [ "x$start_atd" = "xyes" ]; then
  # testmkd /mnt/var/spool/atjobs
  # testmkd /mnt/var/spool/atspool
  # chown 1:1 /mnt/var/spool/atjobs /mnt/var/spool/atspool
  rllinker "atd" "14" "04"
fi
}

# function for configuration of cron services
config_cron () {
if [ "x$start_cron" = "xyes" ] ; then
  if [ -f /mnt/etc/init.d/cron ] ; then
    rllinker "cron" "18" "02"
    # fixme! check for proper permissions!
    testmkd /mnt/var/spool/crontabs
    echo -e "# /etc/crontab - file generated by $0:\n\
#\t$date\nSHELL=/bin/sh\nPATH=/usr/bin:/usr/sbin:/sbin:/bin:/usr/lib/news/bin\
\nMAILTO=\n-*/15 * * * *\troot\ttest -x /usr/lib/cron/run-crons && \
/usr/lib/cron/run-crons >/dev/null 2>&1\n" >/mnt/etc/crontab
  else
    error "$df_errcron" nonfatal
  fi 
fi
}

# syslog service
config_syslog () {
if [ "x$start_syslog" = "xyes" ] ; then
  testmkd /mnt/var/log/news
  echo -e "# /etc/syslog.conf - file generated by $0" >/mnt/etc/syslogd.conf
  echo "kern.warn;*.err;authpriv.none\t/dev/tty10\n\
#kern.warn;*.err;authpriv.none\t|/dev/xconsole\n\
#*.emerg\n\n*.=warn;*.=err\t\t\t-/var/log/warn\n\
#*.crit\t\t\t\t/var/log/warn\n*.*;mail.none;news.none\t\t\
#-/var/log/messages" >> /mnt/etc/syslogd.conf
#  test -n "$log_servers" && \
#  for logserver in $log_servers; do
#       echo -e "*.*;*.*;*.*;*kern.!*\t@$logserver" >>/mnt/etc/syslog.conf
#  done
  rllinker "sysklogd" "02" "18"
fi
}

# secure shell service
config_sshd () {
if [ "x$start_sshd" = "xyes" ] ; then
  if [ -f /mnt/etc/init.d/ssh ] ; then
    #testmkd /mnt/var/run/sshd
    rllinker "ssh" "12" "10"
  else
    error "$df_errsshd" nonfatal
  fi
fi
}

# snmp agent for remote monitoring
config_snmp () {
if [ "x$start_snmp" = "xyes" ] ; then
  if [ -f /mnt/etc/init.d/snmpd ] ; then
    rllinker "snmpd" "24" "02"
    testmkd /mnt/var/lib/net-snmp >/dev/null 2>&1
  fi
    # fixme!!
    # write service monitor depending on services started
  fi
}

# consolefont
consolefont () {
echo -e "setfont ${CONSOLE_FONT} >${LOGFILE} 2>&1" \
  >>/mnt/etc/${D_INITDIR}/boot.ld
}
# acpi and powersave
config_acpi () {
  rllinker "acpid" "10" "19"
  rllinker "acpi-support" "99" "02"

  # nur hier wiel udev_hotplug zu frÃ¼h aufgerufen wird.
  rllinker "udev" "18" "25"
}

# configure gdm as display manager
config_gdm () {
:
}

# configure kdm as display manager
config_kdm () {
:
}

# configure hal, dbus, resmgr and services like that
config_dreshal () {
if [ "x$start_dreshal" = "xyes" ]; then
  rllinker "dbus" "17" "20" 
fi
}

# initialize boot.ld - skript to be executed during early system startup
# (before most of the normal boot init scripts)
# this script should operate like a normal runlevel script (fixme!!)
d_mkrlscript () {
local switch="$1"
local name="$2"
local info="$3"
case "$switch" in
  init)
    echo -e "#!/bin/sh\n# skeleton of /etc/${D_INITDIR}/$name written \
from $0\n# after you applied changes to the creation scripts you have to \
rerun\n# the mkdxsinitrd script to get them applied" \
      >/mnt/etc/${D_INITDIR}/$name
    echo -e "\n\ncase \"\$1\" in\n    start)\techo -n \"$info\"" \
      >>/mnt/etc/${D_INITDIR}/$name
    chmod +x /mnt/etc/${D_INITDIR}/$name
  ;;
  close)
    echo -e "\t;;\n    stop)\n\t;;\nesac\nexit 0" \
      >>/mnt/etc/${D_INITDIR}/$name
  ;;
esac
}

# fixme!! taken from SuSE10.0 untested here ...
# prepare virtual machine environment (vmware, vmplayer)
config_vmware () {
if [ -f /mnt/etc/init.d/vmware-prep ] ; then
if [ -f /mnt/etc/init.d/vmware ] ; then
rllinker "vmware-prep" "18" "02"
rllinker "vmware" "20" "02"
# during vmware sessions linux should not handle usb events/devices
testmkd /mnt/var/X11R6/bin
echo '#!/bin/sh'>> /mnt/etc/udev/rules.d/01-udev-vm.rules
echo -e "# Script for blocking linux from handling usb \
devices\n# during vmware sessions. If you like to remove certain modules \
add them\n# to the list below - Dirk von Suchodoletz, <dirk@goe.net>\n\
STATE=1\nps aux|grep -i vmware|grep -v \"grep\" &>/dev/null && { STATE=0; \
/sbin/rmmod usb-storage &>/tmp/null; }\n\
[ x$ACTION = xremove ] && { [ $STATE = 0 ] && /sbin/rmmod usb-storage \
&>/dev/null; }\nexit \$STATE" > /mnt/var/X11R6/bin/vm-udev
chmod u+x /mnt/var/X11R6/bin/vm-udev
echo -e "# special entry to block linux from reacting to usb events during \
running\n# vmware sessions, generated by $0 during initramfs\n# Dirk von \
Suchodoletz, <dirk@goe.net>\nSUBSYSTEM==\"usb\", ACTION==\"add\", \
PROGRAM=\"/var/X11R6/bin/vm-udev\", OPTIONS=\"ignore_device\"\n\
SUBSYSTEM==\"usb\", ACTION==\"remove\", PROGRAM=\"/var/X11R6/bin/vm-udev\"" \
  >> /mnt/etc/udev/rules.d/01-udev-vm.rules
fi
fi
}

# configure automounter
config_automount () {
if [ -f /mnt/etc/init.d/autofs ] ; then
  testmkd /var/lock/subsys
  echo -e "# /etc/auto.master - file generated by $0:\n\
/misc\t/etc/auto.misc" >/mnt/etc/auto.master
  echo -e "# /etc/auto.misc - file generated by $0:\n" \
    > /mnt/etc/auto.misc
  if [ -n "${automnt_src}" ] ; then
    # local directory and home directory server from machine-setup
    [ -z "${automnt_dir}" ] && automnt_dir="/home"
    strinstr "/" "${automnt_dir}" && error "$df_erratpld" nonfatal
    automnt_dir=${automnt_dir#/}
    echo -e "/home\t/etc/auto.${automnt_dir}\n" >> /mnt/etc/auto.master
    echo -e "# /etc/auto.${automnt_dir} created by $0:\n" \
      > /mnt/etc/auto.${automnt_dir}
    echo -e "*\t-rsize=32768,wsize=32768,tcp,rw\t${automnt_src}/&" \
      >> /mnt/etc/auto.${automnt_dir}
  fi
  echo -e "# /etc/sysconfig/autofs - file modified by\n#\t$0:\n#" \
    > /etc/autofs
  sed -e "s,AUTOFS_OPTIONS.*,AUTOFS_OPTIONS=\"--timeout 3\"," \
    /mnt/etc/${D_SYSCONFDIR}/autofs >> /etc/autofs
  cp /etc/autofs /mnt/etc/${D_SYSCONFDIR}/autofs
  config_portmap
  rllinker "autofs" "18" "04"
fi
}

# start portmapper (needed at least for nfs and nis services)
config_portmap () {
  rllinker "portmap" "18" "20"
}

# start NIS (fixmee - does the service is really named ypbind??)
config_nis () {
  rllinker "ypbind" "06" "16"
}
