# Description:  configuration script for Ubuntu V5.10 to configure
#		linux diskless clients (executed within initial
#		ramdisk after genconfig) 
#
# Author(s):    Dirk von Suchodoletz <dirk@goe.net>, 31-03-2006
#		Nico Dietrich
#		Felix Endres
#
# Copyright:    (c) 2006 - RZ Universitaet Freiburg
# 
# Version:      0.2.1d

# distro specific stuff to initialize
preinit () {
  echo "Creating dhcp user"
  echo "dhcp:x:101:">>/etc/group
  echo "dhcp:x:101:101::/nonexistent:/bin/false" >>/etc/passwd

  # load unix module to provide sockets
  modprobe ${MODPRV} unix || error "  Failed to load the \"unix\" module. \
  Problems with Hardware detection\nwill probably arise"
}

postinit () {
  :
}

# distro specific function called from servconfig script
config_distro () {
# add the halt link to the 0 and 6 runlevel directories
  ln -sf ../halt /mnt/etc/rc0.d/S90halt
  ln -sf ../reboot /mnt/etc/rc6.d/S90reboot
  
  # set default runlevel
  sed -e "s/.*initdefault/id:${D_INITDEFAULT}:initdefault/" -i /mnt/etc/inittab
}

# AUS SuSE-9.3
# udev/hotplug - auto device discovery service
udev_hotplug () {
  local result=0
  [ -d /etc/hotplug -a -d /etc/hotplug.d ] || error "  Hotplug subdirectory \
  is missing! udev(d) might not work as expected." nonfatal
  echo "Enabling hotplug/udev"
  udevstart || result=1
  udevd -d || result=1
  return $result
}

## udev service
#udev_hotplug () {
#local result=0
#echo "Starting udev"
#udevstart || result=1
#if [ -x /bin/udevd ] ; then
#  export UDEVD_EXPECTED_SEQNUM=$(cat /sys/kernel/hotplug_seqnum)
#  export UDEVD_EVENT_TIMEOUT=1
#  echo "" > /proc/sys/kernel/hotplug
#  udevd --daemon || result=1
#else error "  udev daemon is not available. Some devices might not \
#apprear." nonfatal
#fi
#return $result
#}

# linking runlevel scripts
rllinker () {
local script="$1"
local start="$2"
local stop="$3"
# empty runlevel links - decision on running certain services is
# passed via configuration
for i in rc2.d/K$stop$script rc3.d/K$stop$script \
         rc2.d/S$start$script rc3.d/S$start$script ; do
  if ! [ -f ../$script ]; then
    echo "Target `pwd`../$script does not exist. Skipping links"
    break
  else 
    ln -sf ../$script /mnt/etc/init.d/$i
    echo "Linked $script"
  fi
done
}

# group of functions for the normal runlevels - first parameter is start
# second stop
# function for ntp configuration
config_ntp () {
local start=07
local stop=14
if [ -f /mnt/etc/init.d/ntp ] ; then
  echo -e "ntp:x:74:65534:NTP daemon:/var/lib/ntp:/bin/false" \
    >>/mnt/etc/passwd
  testmkd /mnt/var/lib/ntp/var/run/ntp &>/dev/null
  if [ "x$start_ntp" = "xinitial" ] ; then
    echo -e "# entry added by $0: $date" \
      >>/mnt/etc/${D_INITDIR}/boot.ld
    echo "ntpdate -s -b $ntp_servers >${LOGFILE} 2>&1 &" \
      >>/mnt/etc/${D_INITDIR}/boot.ld
  else
    rllinker "ntp" "$start" "$stop"
  fi
fi
}

# function for atd
config_atd () {
if [ "x$start_atd" = "xyes" ]; then
  rllinker "atd" "14" "04"
fi
}

# function for configuration of cron services
config_cron () {
if [ "x$start_cron" = "xyes" ] ; then
  if [ -f /mnt/etc/init.d/cron ] ; then
    testmkd /mnt/var/spool/cron/lastrun
    testmkd /mnt/var/spool/cron/tabs
    echo -e "# /etc/crontab - file generated by $0:\n\
#\t$date\nSHELL=/bin/sh\nPATH=/usr/bin:/usr/sbin:/sbin:/bin:/usr/lib/news/bin\
\nMAILTO=\n-*/15 * * * *\troot\ttest -x /usr/lib/cron/run-crons && \
/usr/lib/cron/run-crons >/dev/null 2>&1\n" >/mnt/etc/crontab
  else
    error "  The cron start script seems not to be installed, so requesting \
\n  the start of cron services make no sense." nonfatal
  fi 
fi
}

# syslog service
config_syslog () {
if [ "x$start_syslog" = "xyes" ] ; then
  echo >/dev/null
fi
}

# secure shell service
config_sshd () {
if [ "x$start_sshd" = "xyes" ] ; then
  if [ -f /mnt/etc/init.d/ssh ] ; then
    rllinker "sshd" "12" "10"
  fi
fi
}

# snmp agent for remote monitoring
config_snmp () {
if [ "x$start_snmp" = "xyes" ] ; then
  if [ -f /mnt/etc/init.d/snmpd ] ; then
    rllinker "snmpd" "24" "02"
    testmkd /mnt/var/lib/net-snmp >/dev/null 2>&1
  fi
    # fixme!!
    # write service monitor depending on services started
  fi
}

# consolefont
consolefont () {
echo -e "setfont ${CONSOLE_FONT} >${LOGFILE} 2>&1" \
  >>/mnt/etc/${D_INITDIR}/boot.ld
}

# acpi and powersave
config_acpi () {
  :
}

# configure xdm as display manager
config_xdm () {
  :
} 

# configure gdm as display manager
config_gdm () {
  # start the display manager as early as possible, but avoid that is
  # started twice during bootup - quickhack ...
  #ln -sf /etc/${D_INITDIR}/xdm /mnt/etc/${D_INITDIR}/rc5.d/S01xdm
  ln -sf ../gdm /mnt/etc/${D_INITDIR}/rc3.d/K20gdm
  echo -e "\t/etc/${D_INITDIR}/gdm start >${LOGFILE} 2>&1\n\
    \t( sleep 120; ln -sf ../gdm /etc/${D_INITDIR}/rc3.d/S01gdm \
    >${LOGFILE} 2>&1) &\n" >>/mnt/etc/${D_INITDIR}/boot.ld
  # append gdm user
  echo "gdm:x:113:">>/etc/group
  echo "gdm:x:106:113:Gnome Display Manager:/var/lib/gdm:/bin/false" >>/etc/passwd
}

# configure kdm as display manager
config_kdm () {
  ln -sf ../kdm /mnt/etc/${D_INITDIR}/rc3.d/K20kdm
  echo -e "\t/etc/${D_INITDIR}/kdm start >${LOGFILE} 2>&1\n\
    \t( sleep 120; ln -sf ../gdm /etc/${D_INITDIR}/rc3.d/S01kdm \
    >${LOGFILE} 2>&1) &\n" >>/mnt/etc/${D_INITDIR}/boot.ld
}

# configure hal, dbus, resmgr and services like that
config_dreshal () {
if [ "x$start_dreshal" = "xyes" ]; then
  :
fi
}

# configure bluetooth services
config_bt () {
:
}

# initialize boot.ld - skript to be executed during early system startup
# (before most of the normal boot init scripts)
# this script should operate like a normal runlevel script (fixme!!)
d_mkrlscript () {
local switch="$1"
local name="$2"
local info="$3"
case "$switch" in
  init)
    echo -e "#!/bin/sh\n# skeleton of /etc/${D_INITDIR}/$name written \
from $0" >/mnt/etc/${D_INITDIR}/$name
    echo -e "\n\ncase \"\$1\" in\n    start)\techo -n \"$info\"" \
      >>/mnt/etc/${D_INITDIR}/$name
    chmod u+x /mnt/etc/${D_INITDIR}/$name
  ;;
  close)
    echo -e "\t;;\n    stop)\n\t;;\nesac\nexit 0" \
      >>/mnt/etc/${D_INITDIR}/$name
  ;;
esac
}

# start name service caching daemon
config_nscd () {
:
}

# start vmware
config_vmware () {
rllinker "vmware-prep" "18" "02"
rllinker "vmware" "20" "02"
}

# configure automounter
config_automount () {
if [ -f /mnt/etc/init.d/autofs ] ; then
  testmkd /var/lock/subsys
  echo -e "# /etc/auto.master - file generated by $0:\n\
/misc\t/etc/auto.misc" >/mnt/etc/auto.master
  echo -e "# /etc/auto.misc - file generated by $0:\n" \
    > /mnt/etc/auto.misc
  if [ -n "${automnt_src}" ] ; then
    # local directory and home directory server from machine-setup
    [ -z "${automnt_dir}" ] && automnt_dir="/home"
    strinstr "/" "${automnt_dir}" && error "  Only toplevel directories \
are allowed as mount points for user home\n  directories. Please set the \
variable \${automnt_dir} appropriately in\n  machine-setup file." nonfatal
    automnt_dir=${automnt_dir#/}
    echo -e "/home\t/etc/auto.${automnt_dir}\n" >> /mnt/etc/auto.master
    echo -e "# /etc/auto.${automnt_dir} created by $0:\n" \
      > /mnt/etc/auto.${automnt_dir}
    echo -e "*\t-rsize=32768,wsize=32768,rw\t${automnt_src}/&" \
      >> /mnt/etc/auto.${automnt_dir}
  fi
  echo -e "# /etc/sysconfig/autofs - file modified by\n#\t$0:\n#" \
    > /etc/autofs
  sed -e "s,AUTOFS_OPTIONS.*,AUTOFS_OPTIONS=\"--timeout 3\"," \
    /mnt/etc/${D_SYSCONFDIR}/autofs >> /etc/autofs
  cp /etc/autofs /mnt/etc/${D_SYSCONFDIR}/autofs
  config_portmap
  rllinker "autofs" "18" "04"
fi
}

# start portmapper (needed at least for nfs and nis services)
config_portmap () {
  rllinker "portmap" "02" "20"
}

