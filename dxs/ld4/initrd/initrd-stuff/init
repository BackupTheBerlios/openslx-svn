#!/bin/sh
# Description:  main script for new type of initial ramdisk for
#		linux diskless clients version 4 
#
# Author(s):    Dirk von Suchodoletz <dirk@goe.net>, 10-02-2006
#		Bla
#		Blub
#
# Copyright:    (c) 2006 - RZ Universitaet Freiburg
# 
# Version:      0.2.2b

# functions common for all distros
errmsg="functions file contains a lot of script \
functionality. Without this\ninit script will not run."
. /etc/functions || ( echo -e "The main $errmsg" && exit 1 )
. /etc/distro-functions || ( echo "The distro $errmsg"  && exit 1 )
# configuration settings (several file and directory variables)
. /etc/sysconfig/config || ( echo -e "  The distribution \
specific configuration file could not be found" && exit 1 )

export PATH=/bin:/sbin:/usr/bin/:/usr/sbin
export date="12-02-2006"

export DEBUGLEVEL=0
export KERNEL="@@@KERNVER@@@"
export NWMODULES="@@@NWMODULES@@@"
export DISTRO="@@@DISTRO@@@"

# do not use dnbd cache file
nodnbdcache="yes"

DEVDIR="/dev"
mount -n -t tmpfs -o 'size=25%,mode=0755' initramfsdevs ${DEVDIR}

cp -a /tmp/null /tmp/console /dev
mkdir -p ${DEVDIR}/pts
mkdir -p ${DEVDIR}/shm
mkdir -p ${DEVDIR}/.udevdb

[ ! -f /proc/cpuinfo ] && mount -n -t proc proc /proc
echo 256 > /proc/sys/kernel/real-root-dev
[ ! -d /sys/class ] && mount -n -t sysfs sysfs /sys

# redirect console (after /dev/console is available, and /dev mounted)
exec < /dev/console > /dev/console 2>&1

# run pre init script
preinit
# start device auto discovery service - distro specific function
udev_hotplug
# read kernel commandline
TMPFSSIZE="50%"
echo "noldap" > /tmp/ldap-done
echo "nodhcp" > /tmp/dhcp-done
read KCMDLINE < /proc/cmdline
export KCMDLINE
for opts in ${KCMDLINE} ; do
  case ${opts} in
    # localization
    country=*)
      COUNTRY=${opts#country=}
      echo -e "\n# localization information gotten via kernel command line \
in $0\ncountry=\"${COUNTRY}\"" >> /etc/machine-setup
    ;;
    # single token for debugging
    debug)
      DEBUGLEVEL=1;;
    # debug level
    debug=*)
      DEBUGLEVEL=${opts#debug=};;
    # if configuration should be gathered by dhcp client
    dhcp)
      DHCP="yes"
      rm /tmp/dhcp-done;;
    # if ldap configuration should be triggered
    ldap)
      LDAP="yes"
      rm /tmp/ldap-done;;
    # ldap configuration with host and port to contact (base)
    ldap*)
      LDAP="yes"
      rm /tmp/ldap-done;;
    # if ld.so.cache should not be generated
    noldsc)
      NOLDSC=yes;;
    # if unionfs should be used
    unionfs*)
      UNIONFS=1;;
    # dnbd server:port 
    dnbdroot=*)
      NBD=dnbd # name of kernel module
      NBDOPT=${opts#dnbdroot=};;
    dcsize=*)
      # size of cache dnbd should use within ram
      DNBDCACHESIZE=${opts#dcsize=};;
    # nbd server:port,filesystem (filesystem is optional)
    nbdroot=*)
      NBD=nbd # name of kernel module
      NBDOPT=${opts#nbdroot=};;
    # ip configuration client-ip:server-ip:gateway:netmask
    ip=*)
      IPINFO=${opts#ip=};;
    # nfs server and path
    nfsroot=*)
      NFSROOT=${opts#nfsroot=}
      echo -e "\n# nfs root information gotten via kernel command line in $0\nnfsroot=\"${NFSROOT}\"\n" >> /etc/machine-setup
    ;;
    # size of tempfs if not max. 50% of RAM should be used
    tmpfssize=*)
      TMPFSSIZE=${opts#tmpfssize=};;
    # vendor code identifier for dhcp requests
    vci=*)
      VCI=${opts#vci=};;
  esac
done
# load block device driver if needed
if [ -n "${NBD}" ] ; then
  modprobe ${MODPRV} ${NBD} || error "  Failed to load \
module ${NBD}.ko. It is needed if you intend to use\n  network block \
device (D)NBD for the client as root filesystem."
fi
# check if at least one type of IP configuration is availabe
if [ -z "$DHCP" -a -z "$LDAP" -a -z "$IPINFO" ] ; then
  if strinfile "clientip" /etc/machine-setup ; then
    # IP configuration seems to be present in machine-setup file
    . /etc/machine-setup
    IPINFO="ip=$clientip:$serverip:$gateway:$subnet_mask"
  else
    error "  Unable to setup at \
least basic functionality, because no IP configuration\n  available. You \
might pass that information via kernel command line\n  through setting of \
'ipappend 1' in pxelinux.cfg/* or just enable dhcp\n  or ldap. They are \
enabled via tokens ('ldap' or 'dhcp') in kernel\n  command line."
  fi
fi
# for ldap configuration at least basic IP setup is needed to contact the
# server
[ -z "$DHCP" -a -n "$LDAP" -a -z "$IPINFO" ] && error "  Unable to setup at \
least basic functionality, because no IP configuration\n  available. Please \
beware - ldap works only in combination of either\n  ipappend or similar or \
with dhcp!"
# set debug level and logfile
echo "Setting debuglevel to ${DEBUGLEVEL}"
export MODPRV=" "
export LOGFILE
if [ "${DEBUGLEVEL}" -gt 0 ] ; then
  # if LOGFILE should be used within initial ramdisk add '/mnt' in front
  # of the variable
  LOGFILE="/var/log/dxs-boot.log"
  [ "${DEBUGLEVEL}" -eq 2 ] && MODPRV="-v"
  [ "${DEBUGLEVEL}" -gt 2 ] && { 
    set -x
    # modprobe should be verbose
    MODPRV="-v";
    # and the kernel too
    echo "7 7 7 7" >/proc/sys/kernel/printk; }
else
  # switch off most of kernel debug output
  echo "0 0 0 0" >/proc/sys/kernel/printk
  # modprobe should stay quiet
  MODPRV="-q"
  LOGFILE="/dev/null"
fi
# load network adaptor modules
modprobe ${MODPRV} -a ${NWMODULES} || error "  Failed to load the network \
adaptor modules defined via mkdxsinitrd\n  run. Please rerun and list the \
appropriate modules (without .ko)."
# set up loopback networking (ipsetup - function defined in /etc/functions)
ipsetup 127.0.0.1 255.0.0.0 0.0.0.0 127.255.255.255 lo
# analyze ip information from the kernel command line and put parts
# of it into several variables
if [ -n "$IPINFO" ] ; then
  IP=`echo $IPINFO|sed -e "s,:.*,,"`
  SERVER=`echo $IPINFO|sed -e "s;[0-9\.]\{3,\}:;;" -e "s,:.*,,"`
  GW=`echo $IPINFO|sed -e "s;[0-9\.]\{3,\}:[0-9\.]\{3,\}:;;" -e "s,:.*,,"`
  # remove last colon after netmask if it was left there ...
  IPINFO=`echo $IPINFO|sed -e "s,:$,,"`
  NM=`echo $IPINFO|sed -e "s,.*:,,"`
  echo -e "# ip configuration written by $0 script\nclientip=$IP\n\
sub_netmask=$NM\ngateway=$GW\nserverip=$SERVER" \
    >>/etc/machine-setup
  # set static ip address via function ipsetup
  ipsetup $IP $NM $GW 255.255.255.255 eth0
else
  noipyet="yes"
fi
# get configuration data via dhcp (with vendor code identifier if present in 
# ${VCI} or ldap if available (in background)
[ -n "$DHCP" ] && rundhcp ${VCI} &
if [ -n "$noipyet" ] ; then
  waitfor /tmp/dhcp-done 20000
  . /etc/machine-setup
  [ -z "$clientip" -o -z "$subnet_mask" -o -z "$gateway" \
    -o -z "$broadcast_address" ] && error "  Did not get complete IP \
configuration via DHCP. You may want to add\n  a vendor code identifier \
via kernel commandline (vci=VCI)."
  ipsetup $clientip $subnet_mask $gateway $broadcast_address eth0
fi
[ -n "$LDAP" ] && ldapconf &

# if root filesystem should be imported via (d) network block device 
if [ -n "${NBD}" ] ; then
  nbdhost=${NBDOPT%:*}
  nbdopt=${NBDOPT#*:}
  nbdport=${nbdopt%,*}
  nbdfs=${nbdopt#*,}
  echo "Diskless client using ${NBD} on $nbdhost:$nbdport with $nbdfs"
  if [ -z "$nbdfs" ]; then 
    RFST=ext2; 
  else
    RFST=$nbdfs;
    # fixme: check for fs in /proc/filesystems before trying to load the module
    modprobe ${MODPRV} ${RFST} || error "  Failed to load the requested \
filesystem module for the client root\n  filesystem ontop of the (D)NBD." \
     nonfatal
  fi
  errmsg="  For some reason the network block device /dev/${NBD}0 never \
appeared.\n  You might want to check udev or your list of static device \
files."

  case "${NBD}" in
    # network block device present in standard kernel
    nbd)
      waitfor /dev/nbd0 10000 || error $errmsg
      nbd-client $nbdhost $nbdport /dev/nbd0 || error "  Failed to start \
the network block device client. Unable to mount root\n  filesystem."
      RDEV=/dev/nbd0
    ;;
    # dnbd by Thorsten Zitterell
    dnbd)
      if [ -z $nodnbdcache ] ; then  # variable not really used yet
        mkdir /dnbd
        mount -n -o 'size=10%' -t tmpfs tmpfs /dnbd
        ( cat /dev/zero > /dnbd/cache 2>/dev/null || echo "ok" >/tmp/cache ) &
        clientopt="-c /dnbd/cache"
        waitfor /tmp/cache 10000
      fi
      waitfor /dev/dnbd0 10000 || error $errmsg
      while ! dnbd-client -b $nbdhost -d /dev/dnbd0 $clientopt ; do
        usleep 10
      done
      echo $?
      RDEV=/dev/dnbd0
      usleep 20
    ;;
  esac
  mount -n -t $RFST -o ro $RDEV /mnt
fi
# if no type of root filesystem is passed via kernel command line try
# information gathered from dhcp process
if [ -z "${DNBDOPT}" -a -z "${NBDOPT}" -a -z "${NFSROOT}" ] ; then
  # information has to be read from dhcp configuration
  if [ -z "$noipyet" ] ; then
    waitfor /tmp/dhcp-done 20000
  fi
  waitfor /tmp/ldap-done 20000
  . /etc/machine-setup
  NFSROOT=${serverip}:${root_path}
fi
# call function for nfs mounts
if [ -z "${DNBDOPT}" -a -z "${NBDOPT}" ] ; then
  nfsmnt ${NFSROOT} ${MODPRV}
fi
# get the complete collection of kernel modules available
mount -n --bind /mnt/lib/modules/${KERNEL} /lib/modules/${KERNEL} || \
  error "  The requested modules directory does not exist. That could mean:\n\
  * The kernel was updated but mkdxsinitrd was not run afterwards.\n\
  * The mounted filesystem does not contain the modules directory at all.\n\
  You might want to check the list of mounted filesystems and if /mnt is\n\
  not empty run 'ls /mnt/lib/modules' to check."
#  You might want to check the list of mounted filesystems and if /mnt is\n\
#  not empty run 'ls /mnt/lib/modules' to check."
# start hardware configuration as background process
hwautocfg &

# try to use unionfs for rw access if available
RWDIR=/dev/shm
if [ -n "${UNIONFS}" ] ; then
  modprobe ${MODPRV} unionfs || { 
    error "  Loading of UnionFS failed - Either module is not present or \
module\n  does not match the running kernel. If you do not want to see this \
\n  message remove the token 'unionfs' from kernel command line." nonfatal 
    UNIONFS=""; }
fi

# setup of client root filesystem dependent on the availability of UnionFS
msg="Starting ldconfig - switch it off via kernel cmdline option 'noldsc'"
if [ -n "${UNIONFS}" ] ; then
  echo "Using UnionFS for rw access"
  mkdir -p ${RWDIR}/union ${RWDIR}/uniontmp
  mount -n -t tmpfs none ${RWDIR}/uniontmp
  mount -n --move /mnt /root
  mount -n -t unionfs -o dirs=${RWDIR}/uniontmp=rw:/root=nfsro none /mnt
  mkdir -p /mnt/uniontmp
  mount -n --move ${RWDIR}/uniontmp /mnt/uniontmp
  # run ldconfig if not switched off via kernel command line
  [ -z "${NOLDSC}" ] && echo $msg && ldconfig /etc/ld.so.cache &
else
  echo "Using bind mounts to ramdisk for rw access"
  mount -n -t tmpfs -o size=${TMPFSSIZE} ramfs ${RWDIR}
  for path in ${D_BINDMPTS} ; do
    mkdir -p ${RWDIR}/${path} >/dev/null 2>&1
    mount -n --bind ${RWDIR}/${path} /mnt/${path}
  done
  # see above ...
  [ -z "${NOLDSC}" ] && echo $msg && ldconfig /tmp/ld.so.cache &
  for path in ${D_RODIRSINRW}; do
    if [ -d /mnt/${path} ] ; then
      LIST=${path}" "$LIST
      # exclude them from etc copy process too
      echo ${path}|sed -e "s,/root/,," >>/tmp/etc.exclude
      mkdir -p /root/${path} >/dev/null 2>&1
      #[ ${DEBUGLEVEL} -gt 0 ] && |      #echo " ${path} (without /root path component)" >>$LOGFILE
      mount -n --bind /mnt/${path} /root/${path} >/dev/null 2>&1
    fi
  done
  for path in /etc/${D_SYSCONFDIR} ${D_DIRINBINDMNT} ${LIST}; do
    mkdir -p ${RWDIR}/${path}
  done
  testmkd ${RWDIR}/var/tmp
  chmod a+rwxt ${RWDIR}/var/tmp >/dev/null 2>&1

  echo -e "${D_ETCEXCL} @@@COMETCEXCL@@@" >>/tmp/etc.exclude
  # if ld.so.cache is to be generated then do not copy the file
  [ -z "${NOLDSC}" ] && echo -e "ld.so.cache*" >>/tmp/etc.exclude
  # for tar exclude lists might be used, more difficult for cp
  cd /mnt
  tar -X /tmp/etc.exclude -cp etc/* | \
    tar -xp -C ${RWDIR} 2>/dev/null ;
  cd /
  mount -n --bind ${RWDIR}/etc /mnt/etc
  mount -n --bind ${RWDIR}/var /mnt/var
  # get the "covered" mounts back into filesystem structure
  for i in ${LIST}; do
    #rm -rf /* >/dev/null 2>&1
    mount -n --move /root/$i /mnt/$i #>>$LOGFILE 2>&1
  done
  rm -rf /root/* >/dev/null 2>&1
  # run some specific stuff !?
fi
# script for stuff to execute during early bootup
d_mkbootld init
echo "fs complete" >/tmp/fscmpl

# write debug file information after filesystem setup completed
echo -e "# /etc${D_SYSCONFDIR}/logfile - file created by $0\n#\n# logfile for linux diskless client specific debugging output\nLOGFILE=\"$LOGFILE\"\n#\n# debug level\nDEBUGLEVEL=\"$DEBUGLEVEL\"" > /mnt/etc/${D_SYSCONFDIR}/logfile || \
  error "Unable to create the logfile configuration in /etc/${D_SYSCONFDIR}. \
That\n  might indicate some severe error."

# run distribution independent and dependent configuration of files and 
# services
servconfig &

for path in @@@COMDIRINDXS@@@ ${D_DIRINDXS} ${D_DIRINBINDMNT} ; do
  testmkd /mnt/${path}
done
for i in /var/run/utmp /var/log/wtmp /var/log/lastlog /etc/mtab ; do
  echo -n > /mnt/$i
done
chmod a+rwxt /mnt/tmp /mnt/tmp/scratch 2>/dev/null &
chown 65534:0 /mnt/var/lib/nobody &
echo -e "# /etc/fstab - file generated by\n#\t$0:\n#\tDirk von \
Suchodoletz, dirk@goe.net\n\nrootfs\t\t/\t\trootfs\t\tro\t\t 0 0\n\
proc\t\t/proc\t\tproc\t\tdefaults\t 0 0\ninitramdevs\t/dev\t\ttmpfs\
\t\trw\t\t 0 0\ndevpts\t\t/dev/pts\tdevpts\t\tmode=0620,gid=5\t 0 0\n\
usbfs\t\t/proc/bus/usb\tusbfs\t\tnoauto\t\t 0 0">/mnt/etc/fstab || \
  error "Failed to create /etc/fstab in the clients root filesystem. The\n\
  noexistence of the file might produce some unexpected behaviour of\n\
  mount commands."
# copy library cache if generated
if [ -z "${NOLDSC}" ] ; then
  if waitfor /tmp/ldcfg 50000 ; then
    test -s /mnt/tmp/ld.so.cache && {
      cp /mnt/tmp/ld.so.cache /mnt/etc/ld.so.cache
      rm /mnt/tmp/ld.so.cache; }
  else 
    error "  For some reason the generation of \
ld.so.cache did not finish in time."
  fi
else
  error "  You decided not to recreate \
/etc/ld.so.cache file. That might cause errors\n  if libraries are installed \
after this file was created on server." nonfatal
fi
# copy machine configuration (from global settings, additions made within
# here and from dhcp/ldap sources) to client /etc for later checks
cp /etc/machine-setup /mnt/etc
waitfor /tmp/hwcfg 20000 || error "  For some reason the hardware autoconfig \
of this client did not finish in\n  time. You might check the process list \
and list the modules loaded until\n  now."
waitfor /tmp/svcfg 20000 || error "  For some reason the software config \
of this client did not finish in\n  time. You might check the process list \
and list the modules loaded until\n  now."
# close runlevel script for stuff to execute during early bootup
d_mkbootld close
# IP configuration is made and should not be updated automatically, udevd
# should be killed if started within init
killall -9 dhcpcd dhclient pump 2>/dev/null


#bash

# post init for some distro specific
postinit

# unmount the bind mounted modules directory
for i in 0 40 100 200 300 500 800 1000 1200; do
  usleep $i && umount -n /lib/modules/${KERNEL} 2>/dev/null && break
  error "  Waited $i ticks to unmount kernel module directory ..." nonfatal
done

[ $i -gt 1000 ] && error "  Unmount of the kernel modules directory \
failed for some reason. Some\n  modprobe still active!?"
# check for inittab file
test -f /mnt/etc/inittab || error "  The file /etc/inittab does not exist or \
is no regular one. It is needed\n  for the bootup procedure to follow."
umount -n /sys || error "  Unmount of the kernel sys directory \
failed for some\nreason.  You will get some error messages that some files \
could not be\n  removed." nonfatal
umount -n /proc/bus/usb >/dev/null 2>&1
mount -n --move /dev /mnt/dev
killall -9 udevd 2>/dev/null
umount -n /proc
[ -n "${UNIONFS}" ] && mount -n --move /root /mnt/mnt 
# new kind of pivoting
exec run-init -c dev/console /mnt /sbin/init || error "  Could not execute \
run-init due to missing command or wrong\n  parameters given."

