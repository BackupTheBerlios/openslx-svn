#! /usr/bin/perl
#
# slxos-setup
#
# (c) 2006 - OpenSLX.com
#
# Oliver Tappe <ot@openslx.com>
#
use strict;

my $abstract = q[
slxos-setup
    This script installs an operating system into a folder that can be used as
    a stage1 system for OpenSLX.
];

use Getopt::Long qw(:config pass_through);
use Pod::Usage;

# add the folder this script lives in and the lib-folder to perl's
# search path for modules:
use FindBin;
use lib "$FindBin::RealBin";
use lib "$FindBin::RealBin/../lib";

use lib "$FindBin::RealBin/../config-db";
	# development path to config-db

use OpenSLX::Basics;
use OpenSLX::OSSetup::Engine;

if ($> != 0) {
	die _tr("Sorry, this script can only be executed by the superuser!\n");
}

my (
	$helpReq,
	$manReq,
	$listReq,
	$source,
	$verbose,
	$versionReq,
);

GetOptions(
	'help|?' => \$helpReq,
	'list' => \$listReq,
	'man' => \$manReq,
	'source=s' => \$source,
	'verbose' => \$verbose,
	'version' => \$versionReq,
) or pod2usage(2);
pod2usage(-msg => $abstract, -verbose => 0, -exitval => 1) if $helpReq;
pod2usage(-verbose => 2) if $manReq;
if ($versionReq) {
	system('slxversion');
	exit 1;
}

openslxInit();

if ($listReq) {
	print _tr("List of supported distros:\n");
	print join('', map {
					"\t$_"
					 .(' 'x(20-length($_)))
					 ."\t($supportedDistros{$_}->{support})\n"
				   }
				   sort keys %supportedDistros);
	exit 1;
}

if (scalar(@ARGV) != 2) {
	print STDERR _tr("You need to specify exactly one action and one vendor-OS name!\n");
	pod2usage(2);
}
my $action = $ARGV[0];
if ($action !~ m[^clone|import-into-db|install|update$]i) {
	print STDERR _tr("You need to specify exactly one action:\n\tinstall, update, clone or import-into-db\n");
	pod2usage(2);
}
my $vendorOSName = $ARGV[1];

# we chdir into the script's folder such that all relative paths have
# a known starting point:
chdir($FindBin::RealBin)
	or die _tr("can't chdir to script-path <%> (%s)", $FindBin::RealBin, $!);

# create ossetup-engine for given distro and start it:
my $engine = OpenSLX::OSSetup::Engine->new;
if ($action =~ m[import]i) {
	$engine->initialize($vendorOSName, 0, 'import');
	if (!-e $engine->{'system-path'}) {
		die _tr("'%s' doesn't exist, giving up!\n", $engine->{'system-path'});
	}
	$engine->addInstalledVendorOSToConfigDB();
} elsif ($action =~ m[update]i) {
	$engine->initialize($vendorOSName, 0, 'update');
	$engine->updateVendorOS();
} elsif ($action =~ m[install]i) {
	$engine->initialize($vendorOSName, 1, 'install');
	$engine->installVendorOS();
} elsif ($action =~ m[clone]i) {
	if (!length($source)) {
		die _tr("You need to specify a source you'd like to clone!\n");
	}
	if ($source !~ m[^.+::?.+$]) {
		die _tr("Unkown source format given, expected '<hostname>:<path>' or '<hostname>::<module>'!\n");
	}
	$engine->initialize($vendorOSName, 0, 'clone');
	$engine->cloneVendorOS($source);
}

__END__

=head1 NAME

slxos-setup - OpenSLX-script to install an operating system into a folder which
will be used as a OpenSLX-stage1-system (a.k.a. vendor-OS).

=head1 SYNOPSIS

=head2 Installing a Vendor-OS

  slxos-setup install <vendor-os-name>

=head2 Cloning an Operating System to Make a New Vendor-OS

  slxos-setup clone <vendor-os-name> --source=<rsync-source>

=head2 Updating a Vendor-OS

  slxos-setup update <vendor-os-name>

=head2 Importing an Existing Vendor-OS into the Config-DB

  slxos-setup import-into-db <vendor-os-name>

=head2 General Format

  slxos-setup [options] <action> <vendor-os-name>

  Options:
      --help                   brief help message
      --list                   show supported distros
      --man                    show full documentation
      --source=<string>        (rsync-)source to clone vendor-OS from
      --version                show version

  Actions:
      clone                    clones an existing operating system via rsync
      import-into-db           imports a vendor-OS into the openslx-db
      install                  installs a vendor-OS into a folder
      update                   updates an installed vendor-OS

=head1 OPTIONS

=over 8

=item B<--help>

Prints a brief help message and exits.

=item B<--list>

Lists all supported distros and exits.

=item B<--man>

Prints the manual page and exits.

=item B<--source=<string>>

When cloning a vendor-OS, slxos-setup needs to know where to fetch
the existing OS-files from. You can specify the rsync-uri with this
option.

=item B<--version>

Prints the version and exits.

=item B<vendor-os-name>

The vendor-os-name is the name of the vendor-OS that shall be installed,
cloned, imported or updated. It corresponds to a folder in the OpenSLX-
stage1-path (usually /var/opt/openslx/stage1).
The general format of a vendor-os-name is this:

	<distro-name>-<release-version>
or
	<distro-name>-<release-version>-<selection>

The distro-name is something like 'suse' or 'fedora', and the release-version
is a numerical version, e.g. '10.1' or '6'.

If you specify a selection, too, you state that you want all the packages
that are provided by the specific selection (many distributions offer several
different package selections for installation, like 'kde' or 'gnome').
If you do not specify any selection, you will get the default selection of
that distribution.

If you pass an unknown selection, you will see a list of the selections
that are available.

In clone-mode, it is a good idea to specify some unqiue string as the selection
part of the vendor-os-name, such that you will easily recognize the vendor-OS
at a later stage. We recommend something like '-cloned-from-<name-of-rsync-source>'.

=back

=cut